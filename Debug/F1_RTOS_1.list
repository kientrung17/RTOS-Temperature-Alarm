
F1_RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08007400  08007400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c68  08007c68  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007c68  08007c68  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c68  08007c68  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c68  08007c68  00008c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c6c  08007c6c  00008c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007c70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002140  20000074  08007ce4  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021b4  08007ce4  000091b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a922  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003816  00000000  00000000  000239bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  000271d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001225  00000000  00000000  000288e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c6d  00000000  00000000  00029b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acb2  00000000  00000000  0002d772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009703c  00000000  00000000  00048424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df460  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006578  00000000  00000000  000df4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000e5a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080073e8 	.word	0x080073e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080073e8 	.word	0x080073e8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <microDelay>:
int a;



void microDelay (uint16_t delay)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <microDelay+0x2c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 800066a:	bf00      	nop
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <microDelay+0x2c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	429a      	cmp	r2, r3
 8000676:	d3f9      	bcc.n	800066c <microDelay+0x14>
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	2000012c 	.word	0x2000012c

08000688 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 800069e:	2320      	movs	r3, #32
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	482b      	ldr	r0, [pc, #172]	@ (8000760 <DHT22_Start+0xd8>)
 80006b4:	f001 fdfa 	bl	80022ac <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 80006b8:	2200      	movs	r2, #0
 80006ba:	2120      	movs	r1, #32
 80006bc:	4828      	ldr	r0, [pc, #160]	@ (8000760 <DHT22_Start+0xd8>)
 80006be:	f001 ff90 	bl	80025e2 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 80006c2:	f240 5014 	movw	r0, #1300	@ 0x514
 80006c6:	f7ff ffc7 	bl	8000658 <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80006ca:	2201      	movs	r2, #1
 80006cc:	2120      	movs	r1, #32
 80006ce:	4824      	ldr	r0, [pc, #144]	@ (8000760 <DHT22_Start+0xd8>)
 80006d0:	f001 ff87 	bl	80025e2 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80006d4:	201e      	movs	r0, #30
 80006d6:	f7ff ffbf 	bl	8000658 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80006de:	2301      	movs	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	481e      	ldr	r0, [pc, #120]	@ (8000760 <DHT22_Start+0xd8>)
 80006e8:	f001 fde0 	bl	80022ac <HAL_GPIO_Init>
  microDelay (40);
 80006ec:	2028      	movs	r0, #40	@ 0x28
 80006ee:	f7ff ffb3 	bl	8000658 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 80006f2:	2120      	movs	r1, #32
 80006f4:	481a      	ldr	r0, [pc, #104]	@ (8000760 <DHT22_Start+0xd8>)
 80006f6:	f001 ff5d 	bl	80025b4 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10b      	bne.n	8000718 <DHT22_Start+0x90>
  {
    microDelay (80);
 8000700:	2050      	movs	r0, #80	@ 0x50
 8000702:	f7ff ffa9 	bl	8000658 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 8000706:	2120      	movs	r1, #32
 8000708:	4815      	ldr	r0, [pc, #84]	@ (8000760 <DHT22_Start+0xd8>)
 800070a:	f001 ff53 	bl	80025b4 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <DHT22_Start+0x90>
 8000714:	2301      	movs	r3, #1
 8000716:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000718:	f001 fcde 	bl	80020d8 <HAL_GetTick>
 800071c:	4603      	mov	r3, r0
 800071e:	4a11      	ldr	r2, [pc, #68]	@ (8000764 <DHT22_Start+0xdc>)
 8000720:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000722:	f001 fcd9 	bl	80020d8 <HAL_GetTick>
 8000726:	4603      	mov	r3, r0
 8000728:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <DHT22_Start+0xe0>)
 800072a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800072c:	e004      	b.n	8000738 <DHT22_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 800072e:	f001 fcd3 	bl	80020d8 <HAL_GetTick>
 8000732:	4603      	mov	r3, r0
 8000734:	4a0c      	ldr	r2, [pc, #48]	@ (8000768 <DHT22_Start+0xe0>)
 8000736:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000738:	2120      	movs	r1, #32
 800073a:	4809      	ldr	r0, [pc, #36]	@ (8000760 <DHT22_Start+0xd8>)
 800073c:	f001 ff3a 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <DHT22_Start+0xcc>
 8000746:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <DHT22_Start+0xdc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1c9a      	adds	r2, r3, #2
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <DHT22_Start+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8ec      	bhi.n	800072e <DHT22_Start+0xa6>
  }
  return Response;
 8000754:	7dfb      	ldrb	r3, [r7, #23]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010800 	.word	0x40010800
 8000764:	20000218 	.word	0x20000218
 8000768:	2000021c 	.word	0x2000021c

0800076c <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	e063      	b.n	8000840 <DHT22_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8000778:	f001 fcae 	bl	80020d8 <HAL_GetTick>
 800077c:	4603      	mov	r3, r0
 800077e:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <DHT22_Read+0xe4>)
 8000780:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000782:	f001 fca9 	bl	80020d8 <HAL_GetTick>
 8000786:	4603      	mov	r3, r0
 8000788:	4a32      	ldr	r2, [pc, #200]	@ (8000854 <DHT22_Read+0xe8>)
 800078a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800078c:	e004      	b.n	8000798 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800078e:	f001 fca3 	bl	80020d8 <HAL_GetTick>
 8000792:	4603      	mov	r3, r0
 8000794:	4a2f      	ldr	r2, [pc, #188]	@ (8000854 <DHT22_Read+0xe8>)
 8000796:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000798:	2120      	movs	r1, #32
 800079a:	482f      	ldr	r0, [pc, #188]	@ (8000858 <DHT22_Read+0xec>)
 800079c:	f001 ff0a 	bl	80025b4 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d106      	bne.n	80007b4 <DHT22_Read+0x48>
 80007a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <DHT22_Read+0xe4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1c9a      	adds	r2, r3, #2
 80007ac:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <DHT22_Read+0xe8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8ec      	bhi.n	800078e <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80007b4:	2028      	movs	r0, #40	@ 0x28
 80007b6:	f7ff ff4f 	bl	8000658 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80007ba:	2120      	movs	r1, #32
 80007bc:	4826      	ldr	r0, [pc, #152]	@ (8000858 <DHT22_Read+0xec>)
 80007be:	f001 fef9 	bl	80025b4 <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10e      	bne.n	80007e6 <DHT22_Read+0x7a>
      b&= ~(1<<(7-a));
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2201      	movs	r2, #1
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	b25a      	sxtb	r2, r3
 80007da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007de:	4013      	ands	r3, r2
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	71bb      	strb	r3, [r7, #6]
 80007e4:	e00b      	b.n	80007fe <DHT22_Read+0x92>
    else
      b|= (1<<(7-a));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f1c3 0307 	rsb	r3, r3, #7
 80007ec:	2201      	movs	r2, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	b25a      	sxtb	r2, r3
 80007f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80007fe:	f001 fc6b 	bl	80020d8 <HAL_GetTick>
 8000802:	4603      	mov	r3, r0
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <DHT22_Read+0xe4>)
 8000806:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000808:	f001 fc66 	bl	80020d8 <HAL_GetTick>
 800080c:	4603      	mov	r3, r0
 800080e:	4a11      	ldr	r2, [pc, #68]	@ (8000854 <DHT22_Read+0xe8>)
 8000810:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000812:	e004      	b.n	800081e <DHT22_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000814:	f001 fc60 	bl	80020d8 <HAL_GetTick>
 8000818:	4603      	mov	r3, r0
 800081a:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <DHT22_Read+0xe8>)
 800081c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800081e:	2120      	movs	r1, #32
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <DHT22_Read+0xec>)
 8000822:	f001 fec7 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d006      	beq.n	800083a <DHT22_Read+0xce>
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <DHT22_Read+0xe4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	1c9a      	adds	r2, r3, #2
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <DHT22_Read+0xe8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d8ec      	bhi.n	8000814 <DHT22_Read+0xa8>
  for (a=0;a<8;a++)
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	3301      	adds	r3, #1
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d998      	bls.n	8000778 <DHT22_Read+0xc>
    }
  }
  return b;
 8000846:	79bb      	ldrb	r3, [r7, #6]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000218 	.word	0x20000218
 8000854:	2000021c 	.word	0x2000021c
 8000858:	40010800 	.word	0x40010800

0800085c <DHT_Temp>:

uint8_t DHT_Temp(){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	uint8_t temp;

	  if(DHT22_Start())
 8000862:	f7ff ff11 	bl	8000688 <DHT22_Start>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 8082 	beq.w	8000972 <DHT_Temp+0x116>
	  {
		RH1 = DHT22_Read(); // First 8bits of humidity
 800086e:	f7ff ff7d 	bl	800076c <DHT22_Read>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b45      	ldr	r3, [pc, #276]	@ (800098c <DHT_Temp+0x130>)
 8000878:	701a      	strb	r2, [r3, #0]
		RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 800087a:	f7ff ff77 	bl	800076c <DHT22_Read>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <DHT_Temp+0x134>)
 8000884:	701a      	strb	r2, [r3, #0]
		TC1 = DHT22_Read(); // First 8bits of Celsius
 8000886:	f7ff ff71 	bl	800076c <DHT22_Read>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b41      	ldr	r3, [pc, #260]	@ (8000994 <DHT_Temp+0x138>)
 8000890:	701a      	strb	r2, [r3, #0]
		TC2 = DHT22_Read(); // Second 8bits of Celsius
 8000892:	f7ff ff6b 	bl	800076c <DHT22_Read>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b3f      	ldr	r3, [pc, #252]	@ (8000998 <DHT_Temp+0x13c>)
 800089c:	701a      	strb	r2, [r3, #0]
		SUM = DHT22_Read(); // Check sum
 800089e:	f7ff ff65 	bl	800076c <DHT22_Read>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b3d      	ldr	r3, [pc, #244]	@ (800099c <DHT_Temp+0x140>)
 80008a8:	701a      	strb	r2, [r3, #0]
		CHECK = RH1 + RH2 + TC1 + TC2;
 80008aa:	4b38      	ldr	r3, [pc, #224]	@ (800098c <DHT_Temp+0x130>)
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b38      	ldr	r3, [pc, #224]	@ (8000990 <DHT_Temp+0x134>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b37      	ldr	r3, [pc, #220]	@ (8000994 <DHT_Temp+0x138>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b36      	ldr	r3, [pc, #216]	@ (8000998 <DHT_Temp+0x13c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b36      	ldr	r3, [pc, #216]	@ (80009a0 <DHT_Temp+0x144>)
 80008c8:	701a      	strb	r2, [r3, #0]
		if (CHECK == SUM)
 80008ca:	4b35      	ldr	r3, [pc, #212]	@ (80009a0 <DHT_Temp+0x144>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b33      	ldr	r3, [pc, #204]	@ (800099c <DHT_Temp+0x140>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d14d      	bne.n	8000972 <DHT_Temp+0x116>
		{
		  if (TC1>127) // If TC1=10000000, negative temperature
 80008d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <DHT_Temp+0x138>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	da0f      	bge.n	8000900 <DHT_Temp+0xa4>
		  {
			tCelsius = (float)TC2/10*(-1);
 80008e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <DHT_Temp+0x13c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fce9 	bl	80002bc <__aeabi_ui2f>
 80008ea:	4603      	mov	r3, r0
 80008ec:	492d      	ldr	r1, [pc, #180]	@ (80009a4 <DHT_Temp+0x148>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fdf0 	bl	80004d4 <__aeabi_fdiv>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80008fa:	4a2b      	ldr	r2, [pc, #172]	@ (80009a8 <DHT_Temp+0x14c>)
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e011      	b.n	8000924 <DHT_Temp+0xc8>
		  }
		  else
		  {
			tCelsius = (float)((TC1<<8)|TC2)/10;
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <DHT_Temp+0x138>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	4a24      	ldr	r2, [pc, #144]	@ (8000998 <DHT_Temp+0x13c>)
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	4313      	orrs	r3, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fcd9 	bl	80002c4 <__aeabi_i2f>
 8000912:	4603      	mov	r3, r0
 8000914:	4923      	ldr	r1, [pc, #140]	@ (80009a4 <DHT_Temp+0x148>)
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fddc 	bl	80004d4 <__aeabi_fdiv>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <DHT_Temp+0x14c>)
 8000922:	601a      	str	r2, [r3, #0]
		  }
		  tFahrenheit = tCelsius * 9/5 + 32;
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <DHT_Temp+0x14c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4920      	ldr	r1, [pc, #128]	@ (80009ac <DHT_Temp+0x150>)
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fd1e 	bl	800036c <__aeabi_fmul>
 8000930:	4603      	mov	r3, r0
 8000932:	491f      	ldr	r1, [pc, #124]	@ (80009b0 <DHT_Temp+0x154>)
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fdcd 	bl	80004d4 <__aeabi_fdiv>
 800093a:	4603      	mov	r3, r0
 800093c:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc0b 	bl	800015c <__addsf3>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <DHT_Temp+0x158>)
 800094c:	601a      	str	r2, [r3, #0]
		  RH = (float) ((RH1<<8)|RH2)/10;
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <DHT_Temp+0x130>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <DHT_Temp+0x134>)
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	4313      	orrs	r3, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fcb2 	bl	80002c4 <__aeabi_i2f>
 8000960:	4603      	mov	r3, r0
 8000962:	4910      	ldr	r1, [pc, #64]	@ (80009a4 <DHT_Temp+0x148>)
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fdb5 	bl	80004d4 <__aeabi_fdiv>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <DHT_Temp+0x15c>)
 8000970:	601a      	str	r2, [r3, #0]
		}
	  }
	 temp = (int)tCelsius;
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <DHT_Temp+0x14c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe48 	bl	800060c <__aeabi_f2iz>
 800097c:	4603      	mov	r3, r0
 800097e:	71fb      	strb	r3, [r7, #7]
	 return temp;
 8000980:	79fb      	ldrb	r3, [r7, #7]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000210 	.word	0x20000210
 8000990:	20000211 	.word	0x20000211
 8000994:	20000212 	.word	0x20000212
 8000998:	20000213 	.word	0x20000213
 800099c:	20000214 	.word	0x20000214
 80009a0:	20000215 	.word	0x20000215
 80009a4:	41200000 	.word	0x41200000
 80009a8:	20000220 	.word	0x20000220
 80009ac:	41100000 	.word	0x41100000
 80009b0:	40a00000 	.word	0x40a00000
 80009b4:	20000224 	.word	0x20000224
 80009b8:	20000228 	.word	0x20000228

080009bc <UART_SendTemp>:

char temperature[3] = {48,48,'\0'};
void UART_SendTemp(uint8_t a)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	temperature[0] = a/10 + '0';
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <UART_SendTemp+0x60>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3330      	adds	r3, #48	@ 0x30
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <UART_SendTemp+0x64>)
 80009d8:	701a      	strb	r2, [r3, #0]
	temperature[1] = a%10 + '0';
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <UART_SendTemp+0x60>)
 80009de:	fba3 1302 	umull	r1, r3, r3, r2
 80009e2:	08d9      	lsrs	r1, r3, #3
 80009e4:	460b      	mov	r3, r1
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	440b      	add	r3, r1
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	3330      	adds	r3, #48	@ 0x30
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <UART_SendTemp+0x64>)
 80009f6:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart2,(uint8_t*)temperature, 2, 1000);
 80009f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fc:	2202      	movs	r2, #2
 80009fe:	4908      	ldr	r1, [pc, #32]	@ (8000a20 <UART_SendTemp+0x64>)
 8000a00:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <UART_SendTemp+0x68>)
 8000a02:	f003 fcd9 	bl	80043b8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t*)'\n', 1, 1000);
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	210a      	movs	r1, #10
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <UART_SendTemp+0x68>)
 8000a10:	f003 fcd2 	bl	80043b8 <HAL_UART_Transmit>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	cccccccd 	.word	0xcccccccd
 8000a20:	20000008 	.word	0x20000008
 8000a24:	200001bc 	.word	0x200001bc

08000a28 <main>:
void vUARTTask(void *pvParameters);

void vDHTTask(void *pvParametes);

int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af02      	add	r7, sp, #8
  HAL_Init();
 8000a2e:	f001 fb2b 	bl	8002088 <HAL_Init>

  SystemClock_Config();
 8000a32:	f000 f8ef 	bl	8000c14 <SystemClock_Config>

  MX_GPIO_Init();
 8000a36:	f000 fa51 	bl	8000edc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3a:	f000 f931 	bl	8000ca0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a3e:	f000 f9f9 	bl	8000e34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a42:	f000 fa21 	bl	8000e88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a46:	f000 f959 	bl	8000cfc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a4a:	f000 f9a7 	bl	8000d9c <MX_TIM2_Init>

  SSD1306_Init();
 8000a4e:	f000 fe59 	bl	8001704 <SSD1306_Init>
  SSD1306_GotoXY(10,10);
 8000a52:	210a      	movs	r1, #10
 8000a54:	200a      	movs	r0, #10
 8000a56:	f000 ffbd 	bl	80019d4 <SSD1306_GotoXY>

  HAL_TIM_Base_Start(&htim1);
 8000a5a:	4819      	ldr	r0, [pc, #100]	@ (8000ac0 <main+0x98>)
 8000a5c:	f003 f864 	bl	8003b28 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <main+0x98>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_TIM_Base_Start(&htim2);
 8000a68:	4816      	ldr	r0, [pc, #88]	@ (8000ac4 <main+0x9c>)
 8000a6a:	f003 f85d 	bl	8003b28 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a74:	4814      	ldr	r0, [pc, #80]	@ (8000ac8 <main+0xa0>)
 8000a76:	f001 fdb4 	bl	80025e2 <HAL_GPIO_WritePin>
  xTaskCreate(vDHTTask,
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <main+0xa4>)
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	2302      	movs	r3, #2
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	2264      	movs	r2, #100	@ 0x64
 8000a86:	4912      	ldr	r1, [pc, #72]	@ (8000ad0 <main+0xa8>)
 8000a88:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <main+0xac>)
 8000a8a:	f004 fc4c 	bl	8005326 <xTaskCreate>
   			  100,
   			  NULL,
   			  2,
			  &dht_handler);

  xTaskCreate(vBuzzerTask,
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <main+0xb0>)
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2301      	movs	r3, #1
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	2264      	movs	r2, #100	@ 0x64
 8000a9a:	4910      	ldr	r1, [pc, #64]	@ (8000adc <main+0xb4>)
 8000a9c:	4810      	ldr	r0, [pc, #64]	@ (8000ae0 <main+0xb8>)
 8000a9e:	f004 fc42 	bl	8005326 <xTaskCreate>
		  	  "Buzzer Task",
			  100,
			  NULL,
			  1,
			  &buzzer_handler);
  xTaskCreate(vUARTTask,
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <main+0xbc>)
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2264      	movs	r2, #100	@ 0x64
 8000aae:	490e      	ldr	r1, [pc, #56]	@ (8000ae8 <main+0xc0>)
 8000ab0:	480e      	ldr	r0, [pc, #56]	@ (8000aec <main+0xc4>)
 8000ab2:	f004 fc38 	bl	8005326 <xTaskCreate>
 			  100,
 			  NULL,
 			  2,
			  &uart_handler);

  vTaskStartScheduler();
 8000ab6:	f004 ff77 	bl	80059a8 <vTaskStartScheduler>

  while (1)
 8000aba:	bf00      	nop
 8000abc:	e7fd      	b.n	8000aba <main+0x92>
 8000abe:	bf00      	nop
 8000ac0:	200000e4 	.word	0x200000e4
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	40010c00 	.word	0x40010c00
 8000acc:	20000234 	.word	0x20000234
 8000ad0:	08007400 	.word	0x08007400
 8000ad4:	08000b81 	.word	0x08000b81
 8000ad8:	2000022c 	.word	0x2000022c
 8000adc:	0800740c 	.word	0x0800740c
 8000ae0:	08000af1 	.word	0x08000af1
 8000ae4:	20000230 	.word	0x20000230
 8000ae8:	08007418 	.word	0x08007418
 8000aec:	08000b11 	.word	0x08000b11

08000af0 <vBuzzerTask>:
char password[4]={'1','0','0','\0'};

TickType_t _500ms = pdMS_TO_TICKS(500);

void vBuzzerTask(void *pvParameters)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <vBuzzerTask+0x1c>)
 8000afe:	f001 fd88 	bl	8002612 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8000b02:	20c8      	movs	r0, #200	@ 0xc8
 8000b04:	f004 fd64 	bl	80055d0 <vTaskDelay>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000b08:	bf00      	nop
 8000b0a:	e7f5      	b.n	8000af8 <vBuzzerTask+0x8>
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <vUARTTask>:
	}
}

void vUARTTask(void *pvParameters)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	while(1)
	{

		HAL_UART_Transmit(&huart2, (uint8_t*)"Temperature is ", 15, 1000);
 8000b18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	4911      	ldr	r1, [pc, #68]	@ (8000b64 <vUARTTask+0x54>)
 8000b20:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <vUARTTask+0x58>)
 8000b22:	f003 fc49 	bl	80043b8 <HAL_UART_Transmit>
		UART_SendTemp(temp);
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <vUARTTask+0x5c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff46 	bl	80009bc <UART_SendTemp>
		if(alert == true)
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <vUARTTask+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d107      	bne.n	8000b48 <vUARTTask+0x38>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)" SOS\n", 5, 1000);
 8000b38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <vUARTTask+0x64>)
 8000b40:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <vUARTTask+0x58>)
 8000b42:	f003 fc39 	bl	80043b8 <HAL_UART_Transmit>
 8000b46:	e006      	b.n	8000b56 <vUARTTask+0x46>
		}
		else
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)" Normal\n", 8, 1000);
 8000b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	490a      	ldr	r1, [pc, #40]	@ (8000b78 <vUARTTask+0x68>)
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <vUARTTask+0x58>)
 8000b52:	f003 fc31 	bl	80043b8 <HAL_UART_Transmit>
		}
		vTaskDelay(_500ms);
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <vUARTTask+0x6c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fd38 	bl	80055d0 <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Temperature is ", 15, 1000);
 8000b60:	e7da      	b.n	8000b18 <vUARTTask+0x8>
 8000b62:	bf00      	nop
 8000b64:	08007424 	.word	0x08007424
 8000b68:	200001bc 	.word	0x200001bc
 8000b6c:	20000238 	.word	0x20000238
 8000b70:	20000239 	.word	0x20000239
 8000b74:	08007434 	.word	0x08007434
 8000b78:	0800743c 	.word	0x0800743c
 8000b7c:	20000010 	.word	0x20000010

08000b80 <vDHTTask>:
	}
}
void vDHTTask(void *pvParametes)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	while(1)
	{

		temp = DHT_Temp();
 8000b88:	f7ff fe68 	bl	800085c <DHT_Temp>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <vDHTTask+0x74>)
 8000b92:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)"DHT Task\n", 9, 1000);
 8000b94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b98:	2209      	movs	r2, #9
 8000b9a:	4917      	ldr	r1, [pc, #92]	@ (8000bf8 <vDHTTask+0x78>)
 8000b9c:	4817      	ldr	r0, [pc, #92]	@ (8000bfc <vDHTTask+0x7c>)
 8000b9e:	f003 fc0b 	bl	80043b8 <HAL_UART_Transmit>
		if(temp > threshold)
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <vDHTTask+0x74>)
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <vDHTTask+0x80>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d90e      	bls.n	8000bcc <vDHTTask+0x4c>
		{
			alert = true;
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <vDHTTask+0x84>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(buzzer_handler, 3);
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <vDHTTask+0x88>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2103      	movs	r1, #3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 fd3e 	bl	800563c <vTaskPrioritySet>
			vTaskResume(buzzer_handler);
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <vDHTTask+0x88>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fe8f 	bl	80058e8 <vTaskResume>
 8000bca:	e00d      	b.n	8000be8 <vDHTTask+0x68>


		}
		else
		{
			alert = false;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <vDHTTask+0x84>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <vDHTTask+0x8c>)
 8000bda:	f001 fd02 	bl	80025e2 <HAL_GPIO_WritePin>
			vTaskSuspend(buzzer_handler);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <vDHTTask+0x88>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 fdce 	bl	8005784 <vTaskSuspend>

		}
		vTaskDelay(_500ms);
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <vDHTTask+0x90>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 fcef 	bl	80055d0 <vTaskDelay>
		temp = DHT_Temp();
 8000bf2:	e7c9      	b.n	8000b88 <vDHTTask+0x8>
 8000bf4:	20000238 	.word	0x20000238
 8000bf8:	08007448 	.word	0x08007448
 8000bfc:	200001bc 	.word	0x200001bc
 8000c00:	2000000b 	.word	0x2000000b
 8000c04:	20000239 	.word	0x20000239
 8000c08:	2000022c 	.word	0x2000022c
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	20000010 	.word	0x20000010

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b090      	sub	sp, #64	@ 0x40
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	2228      	movs	r2, #40	@ 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 fafa 	bl	800721c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c52:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fad3 	bl	8003208 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c68:	f000 fd46 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2102      	movs	r1, #2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fd40 	bl	800370c <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c92:	f000 fd31 	bl	80016f8 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3740      	adds	r7, #64	@ 0x40
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000ca6:	4a13      	ldr	r2, [pc, #76]	@ (8000cf4 <MX_I2C1_Init+0x54>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cac:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <MX_I2C1_Init+0x58>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_I2C1_Init+0x50>)
 8000cde:	f001 fcc9 	bl	8002674 <HAL_I2C_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f000 fd06 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	00061a80 	.word	0x00061a80

08000cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d98 <MX_TIM1_Init+0x9c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d20:	2247      	movs	r2, #71	@ 0x47
 8000d22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d46:	f002 fe9f 	bl	8003a88 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 fcd2 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d62:	f003 f885 	bl	8003e70 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d6c:	f000 fcc4 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_TIM1_Init+0x98>)
 8000d7e:	f003 fa5b 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d88:	f000 fcb6 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000e4 	.word	0x200000e4
 8000d98:	40012c00 	.word	0x40012c00

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000dc2:	2247      	movs	r2, #71	@ 0x47
 8000dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de0:	4813      	ldr	r0, [pc, #76]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000de2:	f002 fe51 	bl	8003a88 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dec:	f000 fc84 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000dfe:	f003 f837 	bl	8003e70 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 fc76 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_TIM2_Init+0x94>)
 8000e1a:	f003 fa0d 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 fc68 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000012c 	.word	0x2000012c

08000e34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <MX_USART1_UART_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	f003 fa54 	bl	8004318 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e76:	f000 fc3f 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000174 	.word	0x20000174
 8000e84:	40013800 	.word	0x40013800

08000e88 <MX_USART2_UART_Init>:
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f003 fa2a 	bl	8004318 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 fc15 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001bc 	.word	0x200001bc
 8000ed8:	40004400 	.word	0x40004400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a34      	ldr	r2, [pc, #208]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000ef6:	f043 0320 	orr.w	r3, r3, #32
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a28      	ldr	r2, [pc, #160]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <MX_GPIO_Init+0xec>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4823      	ldr	r0, [pc, #140]	@ (8000fcc <MX_GPIO_Init+0xf0>)
 8000f3e:	f001 fb50 	bl	80025e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f48:	4821      	ldr	r0, [pc, #132]	@ (8000fd0 <MX_GPIO_Init+0xf4>)
 8000f4a:	f001 fb4a 	bl	80025e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f54:	481d      	ldr	r0, [pc, #116]	@ (8000fcc <MX_GPIO_Init+0xf0>)
 8000f56:	f001 fb44 	bl	80025e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DHT_Pin RS485_DE_Pin */
  GPIO_InitStruct.Pin = DHT_Pin|RS485_DE_Pin;
 8000f5a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	4816      	ldr	r0, [pc, #88]	@ (8000fcc <MX_GPIO_Init+0xf0>)
 8000f74:	f001 f99a 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <MX_GPIO_Init+0xf4>)
 8000f8c:	f001 f98e 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <MX_GPIO_Init+0xf4>)
 8000faa:	f001 f97f 	bl	80022ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2105      	movs	r1, #5
 8000fb2:	2007      	movs	r0, #7
 8000fb4:	f001 f94f 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fb8:	2007      	movs	r0, #7
 8000fba:	f001 f968 	bl	800228e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	10210000 	.word	0x10210000

08000fd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_1)
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f040 8361 	bne.w	80016ac <HAL_GPIO_EXTI_Callback+0x6d4>
  {
    if (__HAL_TIM_GET_COUNTER(&htim1) > 8000)
 8000fea:	4b9f      	ldr	r3, [pc, #636]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x290>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000ff4:	d906      	bls.n	8001004 <HAL_GPIO_EXTI_Callback+0x2c>
    {
      tempCode = 0;
 8000ff6:	4b9d      	ldr	r3, [pc, #628]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
      bitIndex = 0;
 8000ffc:	4b9c      	ldr	r3, [pc, #624]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e031      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x90>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim1) > 1700)
 8001004:	4b98      	ldr	r3, [pc, #608]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x290>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800100e:	4293      	cmp	r3, r2
 8001010:	d912      	bls.n	8001038 <HAL_GPIO_EXTI_Callback+0x60>
    {
      tempCode |= (1UL << (31-bitIndex));   // write 1
 8001012:	4b97      	ldr	r3, [pc, #604]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800101c:	fa23 f202 	lsr.w	r2, r3, r2
 8001020:	4b92      	ldr	r3, [pc, #584]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4313      	orrs	r3, r2
 8001026:	4a91      	ldr	r2, [pc, #580]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 8001028:	6013      	str	r3, [r2, #0]
      bitIndex++;
 800102a:	4b91      	ldr	r3, [pc, #580]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b8f      	ldr	r3, [pc, #572]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e017      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x90>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim1) > 1000)
 8001038:	4b8b      	ldr	r3, [pc, #556]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x290>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001042:	d911      	bls.n	8001068 <HAL_GPIO_EXTI_Callback+0x90>
    {
      tempCode &= ~(1UL << (31-bitIndex));  // write 0
 8001044:	4b8a      	ldr	r3, [pc, #552]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800104e:	40d3      	lsrs	r3, r2
 8001050:	43da      	mvns	r2, r3
 8001052:	4b86      	ldr	r3, [pc, #536]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4013      	ands	r3, r2
 8001058:	4a84      	ldr	r2, [pc, #528]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 800105a:	6013      	str	r3, [r2, #0]
      bitIndex++;
 800105c:	4b84      	ldr	r3, [pc, #528]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b82      	ldr	r3, [pc, #520]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 8001066:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndex == 32)
 8001068:	4b81      	ldr	r3, [pc, #516]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x298>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b20      	cmp	r3, #32
 800106e:	f040 8319 	bne.w	80016a4 <HAL_GPIO_EXTI_Callback+0x6cc>
    {
      cmdli = ~tempCode; // Logical inverted last 8 bits
 8001072:	4b7e      	ldr	r3, [pc, #504]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b7d      	ldr	r3, [pc, #500]	@ (8001274 <HAL_GPIO_EXTI_Callback+0x29c>)
 800107e:	701a      	strb	r2, [r3, #0]
      cmd = tempCode >> 8; // Second last 8 bits
 8001080:	4b7a      	ldr	r3, [pc, #488]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b7b      	ldr	r3, [pc, #492]	@ (8001278 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800108a:	701a      	strb	r2, [r3, #0]
      if(cmdli == cmd) // Check for errors
 800108c:	4b79      	ldr	r3, [pc, #484]	@ (8001274 <HAL_GPIO_EXTI_Callback+0x29c>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	4b79      	ldr	r3, [pc, #484]	@ (8001278 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8302 	bne.w	800169e <HAL_GPIO_EXTI_Callback+0x6c6>
      {
        code = tempCode; // If no bit errors
 800109a:	4b74      	ldr	r3, [pc, #464]	@ (800126c <HAL_GPIO_EXTI_Callback+0x294>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a77      	ldr	r2, [pc, #476]	@ (800127c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80010a0:	6013      	str	r3, [r2, #0]
        // Do your main work HERE

        SSD1306_Clear();
 80010a2:	f000 fd50 	bl	8001b46 <SSD1306_Clear>
        SSD1306_GotoXY (0,10);
 80010a6:	210a      	movs	r1, #10
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 fc93 	bl	80019d4 <SSD1306_GotoXY>
        SSD1306_Puts("Temp : ", &Font_7x10,1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	4973      	ldr	r1, [pc, #460]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80010b2:	4874      	ldr	r0, [pc, #464]	@ (8001284 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80010b4:	f000 fd22 	bl	8001afc <SSD1306_Puts>
        SSD1306_GotoXY (42,10);
 80010b8:	210a      	movs	r1, #10
 80010ba:	202a      	movs	r0, #42	@ 0x2a
 80010bc:	f000 fc8a 	bl	80019d4 <SSD1306_GotoXY>
        SSD1306_Puts((char*)temperature, &Font_7x10,1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	496f      	ldr	r1, [pc, #444]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80010c4:	4870      	ldr	r0, [pc, #448]	@ (8001288 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80010c6:	f000 fd19 	bl	8001afc <SSD1306_Puts>
        SSD1306_GotoXY (0,20);
 80010ca:	2114      	movs	r1, #20
 80010cc:	2000      	movs	r0, #0
 80010ce:	f000 fc81 	bl	80019d4 <SSD1306_GotoXY>
        SSD1306_Puts((char*)"Threshold : ", &Font_7x10,1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	496a      	ldr	r1, [pc, #424]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80010d6:	486d      	ldr	r0, [pc, #436]	@ (800128c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80010d8:	f000 fd10 	bl	8001afc <SSD1306_Puts>

        SSD1306_GotoXY(80, 20);
 80010dc:	2114      	movs	r1, #20
 80010de:	2050      	movs	r0, #80	@ 0x50
 80010e0:	f000 fc78 	bl	80019d4 <SSD1306_GotoXY>
        SSD1306_Puts((char*)password, &Font_7x10, 1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	4966      	ldr	r1, [pc, #408]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80010e8:	4869      	ldr	r0, [pc, #420]	@ (8001290 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80010ea:	f000 fd07 	bl	8001afc <SSD1306_Puts>
        SSD1306_GotoXY (0,50);
 80010ee:	2132      	movs	r1, #50	@ 0x32
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 fc6f 	bl	80019d4 <SSD1306_GotoXY>

        switch (code)
 80010f6:	4b61      	ldr	r3, [pc, #388]	@ (800127c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a66      	ldr	r2, [pc, #408]	@ (8001294 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	f000 82a7 	beq.w	8001650 <HAL_GPIO_EXTI_Callback+0x678>
 8001102:	4a64      	ldr	r2, [pc, #400]	@ (8001294 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	f200 82a5 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800110a:	4a63      	ldr	r2, [pc, #396]	@ (8001298 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	f000 82a3 	beq.w	8001658 <HAL_GPIO_EXTI_Callback+0x680>
 8001112:	4a61      	ldr	r2, [pc, #388]	@ (8001298 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	f200 829d 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800111a:	4a60      	ldr	r2, [pc, #384]	@ (800129c <HAL_GPIO_EXTI_Callback+0x2c4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	f000 829d 	beq.w	800165c <HAL_GPIO_EXTI_Callback+0x684>
 8001122:	4a5e      	ldr	r2, [pc, #376]	@ (800129c <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f200 8295 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800112a:	4a5d      	ldr	r2, [pc, #372]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	f000 8297 	beq.w	8001660 <HAL_GPIO_EXTI_Callback+0x688>
 8001132:	4a5b      	ldr	r2, [pc, #364]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	f200 828d 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800113a:	4a5a      	ldr	r2, [pc, #360]	@ (80012a4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	f000 828b 	beq.w	8001658 <HAL_GPIO_EXTI_Callback+0x680>
 8001142:	4a58      	ldr	r2, [pc, #352]	@ (80012a4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f200 8285 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800114a:	4a57      	ldr	r2, [pc, #348]	@ (80012a8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f000 8289 	beq.w	8001664 <HAL_GPIO_EXTI_Callback+0x68c>
 8001152:	4a55      	ldr	r2, [pc, #340]	@ (80012a8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	f200 827d 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800115a:	4a54      	ldr	r2, [pc, #336]	@ (80012ac <HAL_GPIO_EXTI_Callback+0x2d4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f000 8283 	beq.w	8001668 <HAL_GPIO_EXTI_Callback+0x690>
 8001162:	4a52      	ldr	r2, [pc, #328]	@ (80012ac <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	f200 8275 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800116a:	4a51      	ldr	r2, [pc, #324]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	f000 80bf 	beq.w	80012f0 <HAL_GPIO_EXTI_Callback+0x318>
 8001172:	4a4f      	ldr	r2, [pc, #316]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f200 826d 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800117a:	4a4e      	ldr	r2, [pc, #312]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	f000 815a 	beq.w	8001436 <HAL_GPIO_EXTI_Callback+0x45e>
 8001182:	4a4c      	ldr	r2, [pc, #304]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f200 8265 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800118a:	4a4b      	ldr	r2, [pc, #300]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	f000 80e9 	beq.w	8001364 <HAL_GPIO_EXTI_Callback+0x38c>
 8001192:	4a49      	ldr	r2, [pc, #292]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	f200 825d 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 800119a:	4a48      	ldr	r2, [pc, #288]	@ (80012bc <HAL_GPIO_EXTI_Callback+0x2e4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d04c      	beq.n	800123a <HAL_GPIO_EXTI_Callback+0x262>
 80011a0:	4a46      	ldr	r2, [pc, #280]	@ (80012bc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	f200 8256 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 80011a8:	4a45      	ldr	r2, [pc, #276]	@ (80012c0 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	f000 81ac 	beq.w	8001508 <HAL_GPIO_EXTI_Callback+0x530>
 80011b0:	4a43      	ldr	r2, [pc, #268]	@ (80012c0 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f200 824e 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 80011b8:	4a42      	ldr	r2, [pc, #264]	@ (80012c4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f000 8227 	beq.w	800160e <HAL_GPIO_EXTI_Callback+0x636>
 80011c0:	4a40      	ldr	r2, [pc, #256]	@ (80012c4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	f200 8246 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 80011c8:	4a3f      	ldr	r2, [pc, #252]	@ (80012c8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	f000 81fe 	beq.w	80015cc <HAL_GPIO_EXTI_Callback+0x5f4>
 80011d0:	4a3d      	ldr	r2, [pc, #244]	@ (80012c8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	f200 823e 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 80011d8:	4a3c      	ldr	r2, [pc, #240]	@ (80012cc <HAL_GPIO_EXTI_Callback+0x2f4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	f000 81b7 	beq.w	800154e <HAL_GPIO_EXTI_Callback+0x576>
 80011e0:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <HAL_GPIO_EXTI_Callback+0x2f4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	f200 8236 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 80011e8:	4a39      	ldr	r2, [pc, #228]	@ (80012d0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	f000 8169 	beq.w	80014c2 <HAL_GPIO_EXTI_Callback+0x4ea>
 80011f0:	4a37      	ldr	r2, [pc, #220]	@ (80012d0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	f200 822e 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 80011f8:	4a36      	ldr	r2, [pc, #216]	@ (80012d4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	f000 80d5 	beq.w	80013aa <HAL_GPIO_EXTI_Callback+0x3d2>
 8001200:	4a34      	ldr	r2, [pc, #208]	@ (80012d4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	f200 8226 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 8001208:	4a33      	ldr	r2, [pc, #204]	@ (80012d8 <HAL_GPIO_EXTI_Callback+0x300>)
 800120a:	4293      	cmp	r3, r2
 800120c:	f000 822e 	beq.w	800166c <HAL_GPIO_EXTI_Callback+0x694>
 8001210:	4a31      	ldr	r2, [pc, #196]	@ (80012d8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001212:	4293      	cmp	r3, r2
 8001214:	f200 821e 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 8001218:	4a30      	ldr	r2, [pc, #192]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x304>)
 800121a:	4293      	cmp	r3, r2
 800121c:	f000 80e8 	beq.w	80013f0 <HAL_GPIO_EXTI_Callback+0x418>
 8001220:	4a2e      	ldr	r2, [pc, #184]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x304>)
 8001222:	4293      	cmp	r3, r2
 8001224:	f200 8216 	bhi.w	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
 8001228:	4a2d      	ldr	r2, [pc, #180]	@ (80012e0 <HAL_GPIO_EXTI_Callback+0x308>)
 800122a:	4293      	cmp	r3, r2
 800122c:	f000 8220 	beq.w	8001670 <HAL_GPIO_EXTI_Callback+0x698>
 8001230:	4a2c      	ldr	r2, [pc, #176]	@ (80012e4 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	f000 8122 	beq.w	800147c <HAL_GPIO_EXTI_Callback+0x4a4>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
          }
            break;

          default :
            break;
 8001238:	e20c      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x67c>
		  SSD1306_GotoXY (0,40);
 800123a:	2128      	movs	r1, #40	@ 0x28
 800123c:	2000      	movs	r0, #0
 800123e:	f000 fbc9 	bl	80019d4 <SSD1306_GotoXY>
          SSD1306_Puts((char*)"New Threshold", &Font_7x10,1);
 8001242:	2201      	movs	r2, #1
 8001244:	490e      	ldr	r1, [pc, #56]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001246:	4828      	ldr	r0, [pc, #160]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0x310>)
 8001248:	f000 fc58 	bl	8001afc <SSD1306_Puts>
          SSD1306_GotoXY (80,20);
 800124c:	2114      	movs	r1, #20
 800124e:	2050      	movs	r0, #80	@ 0x50
 8001250:	f000 fbc0 	bl	80019d4 <SSD1306_GotoXY>
          SSD1306_Puts((char*) password, &Font_7x10,1);
 8001254:	2201      	movs	r2, #1
 8001256:	490a      	ldr	r1, [pc, #40]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800125a:	f000 fc4f 	bl	8001afc <SSD1306_Puts>
          bienxacthuc = 1;
 800125e:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <HAL_GPIO_EXTI_Callback+0x314>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
           break;
 8001264:	e219      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
 8001266:	bf00      	nop
 8001268:	200000e4 	.word	0x200000e4
 800126c:	20000204 	.word	0x20000204
 8001270:	20000208 	.word	0x20000208
 8001274:	2000020a 	.word	0x2000020a
 8001278:	20000209 	.word	0x20000209
 800127c:	2000020c 	.word	0x2000020c
 8001280:	20000000 	.word	0x20000000
 8001284:	08007454 	.word	0x08007454
 8001288:	20000008 	.word	0x20000008
 800128c:	0800745c 	.word	0x0800745c
 8001290:	2000000c 	.word	0x2000000c
 8001294:	00ffe21d 	.word	0x00ffe21d
 8001298:	00ffe01f 	.word	0x00ffe01f
 800129c:	00ffc23d 	.word	0x00ffc23d
 80012a0:	00ffb04f 	.word	0x00ffb04f
 80012a4:	00ffa857 	.word	0x00ffa857
 80012a8:	00ffa25d 	.word	0x00ffa25d
 80012ac:	00ff9867 	.word	0x00ff9867
 80012b0:	00ff906f 	.word	0x00ff906f
 80012b4:	00ff7a85 	.word	0x00ff7a85
 80012b8:	00ff6897 	.word	0x00ff6897
 80012bc:	00ff629d 	.word	0x00ff629d
 80012c0:	00ff5aa5 	.word	0x00ff5aa5
 80012c4:	00ff52ad 	.word	0x00ff52ad
 80012c8:	00ff4ab5 	.word	0x00ff4ab5
 80012cc:	00ff42bd 	.word	0x00ff42bd
 80012d0:	00ff38c7 	.word	0x00ff38c7
 80012d4:	00ff30cf 	.word	0x00ff30cf
 80012d8:	00ff22dd 	.word	0x00ff22dd
 80012dc:	00ff18e7 	.word	0x00ff18e7
 80012e0:	00ff02fd 	.word	0x00ff02fd
 80012e4:	00ff10ef 	.word	0x00ff10ef
 80012e8:	0800746c 	.word	0x0800746c
 80012ec:	20000240 	.word	0x20000240
		  SSD1306_GotoXY (0,40);
 80012f0:	2128      	movs	r1, #40	@ 0x28
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 fb6e 	bl	80019d4 <SSD1306_GotoXY>
          SSD1306_Puts((char*)"Threshold Success ", &Font_7x10,1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	49a6      	ldr	r1, [pc, #664]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80012fc:	48a6      	ldr	r0, [pc, #664]	@ (8001598 <HAL_GPIO_EXTI_Callback+0x5c0>)
 80012fe:	f000 fbfd 	bl	8001afc <SSD1306_Puts>
          if(bienxacthuc == 1){
 8001302:	4ba6      	ldr	r3, [pc, #664]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d125      	bne.n	8001356 <HAL_GPIO_EXTI_Callback+0x37e>
        	  threshold = 0;
 800130a:	4ba5      	ldr	r3, [pc, #660]	@ (80015a0 <HAL_GPIO_EXTI_Callback+0x5c8>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
        	  threshold = ( password[0] - '0')*100 + ( password[1] - '0')*10 + ( password[2] - '0');
 8001310:	4ba4      	ldr	r3, [pc, #656]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3b30      	subs	r3, #48	@ 0x30
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4413      	add	r3, r2
 800131e:	461a      	mov	r2, r3
 8001320:	0091      	lsls	r1, r2, #2
 8001322:	461a      	mov	r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b9d      	ldr	r3, [pc, #628]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	3b30      	subs	r3, #48	@ 0x30
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4619      	mov	r1, r3
 8001336:	0089      	lsls	r1, r1, #2
 8001338:	440b      	add	r3, r1
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b98      	ldr	r3, [pc, #608]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	4413      	add	r3, r2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3b30      	subs	r3, #48	@ 0x30
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b94      	ldr	r3, [pc, #592]	@ (80015a0 <HAL_GPIO_EXTI_Callback+0x5c8>)
 8001350:	701a      	strb	r2, [r3, #0]
          result =1;
 8001352:	2301      	movs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
          bienxacthuc = 0;
 8001356:	4b91      	ldr	r3, [pc, #580]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
          biendemso = 0;
 800135c:	4b92      	ldr	r3, [pc, #584]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
            break;
 8001362:	e19a      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            SSD1306_Puts ("0", &Font_7x10, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	498b      	ldr	r1, [pc, #556]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8001368:	4890      	ldr	r0, [pc, #576]	@ (80015ac <HAL_GPIO_EXTI_Callback+0x5d4>)
 800136a:	f000 fbc7 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 800136e:	4b8b      	ldr	r3, [pc, #556]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	f040 817e 	bne.w	8001674 <HAL_GPIO_EXTI_Callback+0x69c>
 8001378:	4b8b      	ldr	r3, [pc, #556]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b02      	cmp	r3, #2
 800137e:	f300 8179 	bgt.w	8001674 <HAL_GPIO_EXTI_Callback+0x69c>
        	  password[biendemso] = '0';
 8001382:	4b89      	ldr	r3, [pc, #548]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a87      	ldr	r2, [pc, #540]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001388:	2130      	movs	r1, #48	@ 0x30
 800138a:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 800138c:	4b86      	ldr	r3, [pc, #536]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a85      	ldr	r2, [pc, #532]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001394:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 8001396:	2114      	movs	r1, #20
 8001398:	2050      	movs	r0, #80	@ 0x50
 800139a:	f000 fb1b 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 800139e:	2201      	movs	r2, #1
 80013a0:	497c      	ldr	r1, [pc, #496]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80013a2:	4880      	ldr	r0, [pc, #512]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 80013a4:	f000 fbaa 	bl	8001afc <SSD1306_Puts>
            break;
 80013a8:	e164      	b.n	8001674 <HAL_GPIO_EXTI_Callback+0x69c>
            SSD1306_Puts ("1", &Font_7x10, 1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	4979      	ldr	r1, [pc, #484]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80013ae:	4880      	ldr	r0, [pc, #512]	@ (80015b0 <HAL_GPIO_EXTI_Callback+0x5d8>)
 80013b0:	f000 fba4 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 80013b4:	4b79      	ldr	r3, [pc, #484]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	f040 815d 	bne.w	8001678 <HAL_GPIO_EXTI_Callback+0x6a0>
 80013be:	4b7a      	ldr	r3, [pc, #488]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	f300 8158 	bgt.w	8001678 <HAL_GPIO_EXTI_Callback+0x6a0>
        	  password[biendemso] = '1';
 80013c8:	4b77      	ldr	r3, [pc, #476]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a75      	ldr	r2, [pc, #468]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 80013ce:	2131      	movs	r1, #49	@ 0x31
 80013d0:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 80013d2:	4b75      	ldr	r3, [pc, #468]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a73      	ldr	r2, [pc, #460]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80013da:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 80013dc:	2114      	movs	r1, #20
 80013de:	2050      	movs	r0, #80	@ 0x50
 80013e0:	f000 faf8 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	496b      	ldr	r1, [pc, #428]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80013e8:	486e      	ldr	r0, [pc, #440]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 80013ea:	f000 fb87 	bl	8001afc <SSD1306_Puts>
            break;
 80013ee:	e143      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0x6a0>
            SSD1306_Puts ("2", &Font_7x10, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	4968      	ldr	r1, [pc, #416]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80013f4:	486f      	ldr	r0, [pc, #444]	@ (80015b4 <HAL_GPIO_EXTI_Callback+0x5dc>)
 80013f6:	f000 fb81 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 80013fa:	4b68      	ldr	r3, [pc, #416]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 813c 	bne.w	800167c <HAL_GPIO_EXTI_Callback+0x6a4>
 8001404:	4b68      	ldr	r3, [pc, #416]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b02      	cmp	r3, #2
 800140a:	f300 8137 	bgt.w	800167c <HAL_GPIO_EXTI_Callback+0x6a4>
        	  password[biendemso] = '2';
 800140e:	4b66      	ldr	r3, [pc, #408]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a64      	ldr	r2, [pc, #400]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001414:	2132      	movs	r1, #50	@ 0x32
 8001416:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 8001418:	4b63      	ldr	r3, [pc, #396]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a62      	ldr	r2, [pc, #392]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001420:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 8001422:	2114      	movs	r1, #20
 8001424:	2050      	movs	r0, #80	@ 0x50
 8001426:	f000 fad5 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 800142a:	2201      	movs	r2, #1
 800142c:	4959      	ldr	r1, [pc, #356]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 800142e:	485d      	ldr	r0, [pc, #372]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001430:	f000 fb64 	bl	8001afc <SSD1306_Puts>
            break;
 8001434:	e122      	b.n	800167c <HAL_GPIO_EXTI_Callback+0x6a4>
            SSD1306_Puts ("3", &Font_7x10, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	4956      	ldr	r1, [pc, #344]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 800143a:	485f      	ldr	r0, [pc, #380]	@ (80015b8 <HAL_GPIO_EXTI_Callback+0x5e0>)
 800143c:	f000 fb5e 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 8001440:	4b56      	ldr	r3, [pc, #344]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	f040 811b 	bne.w	8001680 <HAL_GPIO_EXTI_Callback+0x6a8>
 800144a:	4b57      	ldr	r3, [pc, #348]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	f300 8116 	bgt.w	8001680 <HAL_GPIO_EXTI_Callback+0x6a8>
        	  password[biendemso] = '3';
 8001454:	4b54      	ldr	r3, [pc, #336]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a52      	ldr	r2, [pc, #328]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 800145a:	2133      	movs	r1, #51	@ 0x33
 800145c:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 800145e:	4b52      	ldr	r3, [pc, #328]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a50      	ldr	r2, [pc, #320]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001466:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 8001468:	2114      	movs	r1, #20
 800146a:	2050      	movs	r0, #80	@ 0x50
 800146c:	f000 fab2 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 8001470:	2201      	movs	r2, #1
 8001472:	4948      	ldr	r1, [pc, #288]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8001474:	484b      	ldr	r0, [pc, #300]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001476:	f000 fb41 	bl	8001afc <SSD1306_Puts>
            break;
 800147a:	e101      	b.n	8001680 <HAL_GPIO_EXTI_Callback+0x6a8>
            SSD1306_Puts ("4", &Font_7x10, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	4945      	ldr	r1, [pc, #276]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8001480:	484e      	ldr	r0, [pc, #312]	@ (80015bc <HAL_GPIO_EXTI_Callback+0x5e4>)
 8001482:	f000 fb3b 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 8001486:	4b45      	ldr	r3, [pc, #276]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	f040 80fa 	bne.w	8001684 <HAL_GPIO_EXTI_Callback+0x6ac>
 8001490:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	f300 80f5 	bgt.w	8001684 <HAL_GPIO_EXTI_Callback+0x6ac>
        	  password[biendemso] = '4';
 800149a:	4b43      	ldr	r3, [pc, #268]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a41      	ldr	r2, [pc, #260]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 80014a0:	2134      	movs	r1, #52	@ 0x34
 80014a2:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 80014a4:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a3f      	ldr	r2, [pc, #252]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80014ac:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 80014ae:	2114      	movs	r1, #20
 80014b0:	2050      	movs	r0, #80	@ 0x50
 80014b2:	f000 fa8f 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 80014b6:	2201      	movs	r2, #1
 80014b8:	4936      	ldr	r1, [pc, #216]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80014ba:	483a      	ldr	r0, [pc, #232]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 80014bc:	f000 fb1e 	bl	8001afc <SSD1306_Puts>
            break;
 80014c0:	e0e0      	b.n	8001684 <HAL_GPIO_EXTI_Callback+0x6ac>
            SSD1306_Puts ("5", &Font_7x10, 1);
 80014c2:	2201      	movs	r2, #1
 80014c4:	4933      	ldr	r1, [pc, #204]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80014c6:	483e      	ldr	r0, [pc, #248]	@ (80015c0 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80014c8:	f000 fb18 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 80014cc:	4b33      	ldr	r3, [pc, #204]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f040 80d9 	bne.w	8001688 <HAL_GPIO_EXTI_Callback+0x6b0>
 80014d6:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	f300 80d4 	bgt.w	8001688 <HAL_GPIO_EXTI_Callback+0x6b0>
        	  password[biendemso] = '5';
 80014e0:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a2f      	ldr	r2, [pc, #188]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 80014e6:	2135      	movs	r1, #53	@ 0x35
 80014e8:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a2d      	ldr	r2, [pc, #180]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80014f2:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 80014f4:	2114      	movs	r1, #20
 80014f6:	2050      	movs	r0, #80	@ 0x50
 80014f8:	f000 fa6c 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 80014fc:	2201      	movs	r2, #1
 80014fe:	4925      	ldr	r1, [pc, #148]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8001500:	4828      	ldr	r0, [pc, #160]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001502:	f000 fafb 	bl	8001afc <SSD1306_Puts>
            break;
 8001506:	e0bf      	b.n	8001688 <HAL_GPIO_EXTI_Callback+0x6b0>
            SSD1306_Puts ("6", &Font_7x10, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	4922      	ldr	r1, [pc, #136]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 800150c:	482d      	ldr	r0, [pc, #180]	@ (80015c4 <HAL_GPIO_EXTI_Callback+0x5ec>)
 800150e:	f000 faf5 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	f040 80b8 	bne.w	800168c <HAL_GPIO_EXTI_Callback+0x6b4>
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	f300 80b3 	bgt.w	800168c <HAL_GPIO_EXTI_Callback+0x6b4>
        	  password[biendemso] = '6';
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 800152c:	2136      	movs	r1, #54	@ 0x36
 800152e:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a1c      	ldr	r2, [pc, #112]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001538:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 800153a:	2114      	movs	r1, #20
 800153c:	2050      	movs	r0, #80	@ 0x50
 800153e:	f000 fa49 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 8001542:	2201      	movs	r2, #1
 8001544:	4913      	ldr	r1, [pc, #76]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8001546:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001548:	f000 fad8 	bl	8001afc <SSD1306_Puts>
            break;
 800154c:	e09e      	b.n	800168c <HAL_GPIO_EXTI_Callback+0x6b4>
            SSD1306_Puts ("7", &Font_7x10, 1);
 800154e:	2201      	movs	r2, #1
 8001550:	4910      	ldr	r1, [pc, #64]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8001552:	481d      	ldr	r0, [pc, #116]	@ (80015c8 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001554:	f000 fad2 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_GPIO_EXTI_Callback+0x5c4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	f040 8097 	bne.w	8001690 <HAL_GPIO_EXTI_Callback+0x6b8>
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b02      	cmp	r3, #2
 8001568:	f300 8092 	bgt.w	8001690 <HAL_GPIO_EXTI_Callback+0x6b8>
        	  password[biendemso] = '7';
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0c      	ldr	r2, [pc, #48]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001572:	2137      	movs	r1, #55	@ 0x37
 8001574:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x5d0>)
 800157e:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 8001580:	2114      	movs	r1, #20
 8001582:	2050      	movs	r0, #80	@ 0x50
 8001584:	f000 fa26 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 8001588:	2201      	movs	r2, #1
 800158a:	4902      	ldr	r1, [pc, #8]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x5bc>)
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5cc>)
 800158e:	f000 fab5 	bl	8001afc <SSD1306_Puts>
            break;
 8001592:	e07d      	b.n	8001690 <HAL_GPIO_EXTI_Callback+0x6b8>
 8001594:	20000000 	.word	0x20000000
 8001598:	0800747c 	.word	0x0800747c
 800159c:	20000240 	.word	0x20000240
 80015a0:	2000000b 	.word	0x2000000b
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	2000023c 	.word	0x2000023c
 80015ac:	08007490 	.word	0x08007490
 80015b0:	08007494 	.word	0x08007494
 80015b4:	08007498 	.word	0x08007498
 80015b8:	0800749c 	.word	0x0800749c
 80015bc:	080074a0 	.word	0x080074a0
 80015c0:	080074a4 	.word	0x080074a4
 80015c4:	080074a8 	.word	0x080074a8
 80015c8:	080074ac 	.word	0x080074ac
            SSD1306_Puts ("8", &Font_7x10, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	4939      	ldr	r1, [pc, #228]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x6dc>)
 80015d0:	4839      	ldr	r0, [pc, #228]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x6e0>)
 80015d2:	f000 fa93 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 80015d6:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x6e4>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d15a      	bne.n	8001694 <HAL_GPIO_EXTI_Callback+0x6bc>
 80015de:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	dc56      	bgt.n	8001694 <HAL_GPIO_EXTI_Callback+0x6bc>
        	  password[biendemso] = '8';
 80015e6:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a36      	ldr	r2, [pc, #216]	@ (80016c4 <HAL_GPIO_EXTI_Callback+0x6ec>)
 80015ec:	2138      	movs	r1, #56	@ 0x38
 80015ee:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	4a32      	ldr	r2, [pc, #200]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 80015f8:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 80015fa:	2114      	movs	r1, #20
 80015fc:	2050      	movs	r0, #80	@ 0x50
 80015fe:	f000 f9e9 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 8001602:	2201      	movs	r2, #1
 8001604:	492b      	ldr	r1, [pc, #172]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001606:	482f      	ldr	r0, [pc, #188]	@ (80016c4 <HAL_GPIO_EXTI_Callback+0x6ec>)
 8001608:	f000 fa78 	bl	8001afc <SSD1306_Puts>
            break;
 800160c:	e042      	b.n	8001694 <HAL_GPIO_EXTI_Callback+0x6bc>
            SSD1306_Puts ("9", &Font_7x10, 1);
 800160e:	2201      	movs	r2, #1
 8001610:	4928      	ldr	r1, [pc, #160]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001612:	482d      	ldr	r0, [pc, #180]	@ (80016c8 <HAL_GPIO_EXTI_Callback+0x6f0>)
 8001614:	f000 fa72 	bl	8001afc <SSD1306_Puts>
          if (bienxacthuc == 1 && biendemso <=2)
 8001618:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x6e4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d13b      	bne.n	8001698 <HAL_GPIO_EXTI_Callback+0x6c0>
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	dc37      	bgt.n	8001698 <HAL_GPIO_EXTI_Callback+0x6c0>
        	  password[biendemso] = '9';
 8001628:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a25      	ldr	r2, [pc, #148]	@ (80016c4 <HAL_GPIO_EXTI_Callback+0x6ec>)
 800162e:	2139      	movs	r1, #57	@ 0x39
 8001630:	54d1      	strb	r1, [r2, r3]
        	  biendemso++;
 8001632:	4b23      	ldr	r3, [pc, #140]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x6e8>)
 800163a:	6013      	str	r3, [r2, #0]
        	  SSD1306_GotoXY (80,20);
 800163c:	2114      	movs	r1, #20
 800163e:	2050      	movs	r0, #80	@ 0x50
 8001640:	f000 f9c8 	bl	80019d4 <SSD1306_GotoXY>
      	      SSD1306_Puts((char*) password, &Font_7x10,1);
 8001644:	2201      	movs	r2, #1
 8001646:	491b      	ldr	r1, [pc, #108]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x6dc>)
 8001648:	481e      	ldr	r0, [pc, #120]	@ (80016c4 <HAL_GPIO_EXTI_Callback+0x6ec>)
 800164a:	f000 fa57 	bl	8001afc <SSD1306_Puts>
            break;
 800164e:	e023      	b.n	8001698 <HAL_GPIO_EXTI_Callback+0x6c0>
            break;
 8001650:	bf00      	nop
 8001652:	e022      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001654:	bf00      	nop
 8001656:	e020      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
         break;
 8001658:	bf00      	nop
 800165a:	e01e      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
          break;
 800165c:	bf00      	nop
 800165e:	e01c      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001660:	bf00      	nop
 8001662:	e01a      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
          break;
 8001664:	bf00      	nop
 8001666:	e018      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001668:	bf00      	nop
 800166a:	e016      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 800166c:	bf00      	nop
 800166e:	e014      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001670:	bf00      	nop
 8001672:	e012      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001674:	bf00      	nop
 8001676:	e010      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001678:	bf00      	nop
 800167a:	e00e      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 800167c:	bf00      	nop
 800167e:	e00c      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001680:	bf00      	nop
 8001682:	e00a      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001684:	bf00      	nop
 8001686:	e008      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001688:	bf00      	nop
 800168a:	e006      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 800168c:	bf00      	nop
 800168e:	e004      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001690:	bf00      	nop
 8001692:	e002      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001694:	bf00      	nop
 8001696:	e000      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x6c2>
            break;
 8001698:	bf00      	nop
        }
      SSD1306_UpdateScreen();
 800169a:	f000 f8f7 	bl	800188c <SSD1306_UpdateScreen>
      }
    bitIndex = 0;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <HAL_GPIO_EXTI_Callback+0x6f4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
    }
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80016a4:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_GPIO_EXTI_Callback+0x6f8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	080074b0 	.word	0x080074b0
 80016bc:	20000240 	.word	0x20000240
 80016c0:	2000023c 	.word	0x2000023c
 80016c4:	2000000c 	.word	0x2000000c
 80016c8:	080074b4 	.word	0x080074b4
 80016cc:	20000208 	.word	0x20000208
 80016d0:	200000e4 	.word	0x200000e4

080016d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016e6:	f000 fce5 	bl	80020b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40000400 	.word	0x40000400

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800170a:	f000 fa25 	bl	8001b58 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800170e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001712:	2201      	movs	r2, #1
 8001714:	2178      	movs	r1, #120	@ 0x78
 8001716:	485b      	ldr	r0, [pc, #364]	@ (8001884 <SSD1306_Init+0x180>)
 8001718:	f001 f9ee 	bl	8002af8 <HAL_I2C_IsDeviceReady>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001722:	2300      	movs	r3, #0
 8001724:	e0a9      	b.n	800187a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001726:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800172a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800172c:	e002      	b.n	8001734 <SSD1306_Init+0x30>
		p--;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3b01      	subs	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f9      	bne.n	800172e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800173a:	22ae      	movs	r2, #174	@ 0xae
 800173c:	2100      	movs	r1, #0
 800173e:	2078      	movs	r0, #120	@ 0x78
 8001740:	f000 fa84 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001744:	2220      	movs	r2, #32
 8001746:	2100      	movs	r1, #0
 8001748:	2078      	movs	r0, #120	@ 0x78
 800174a:	f000 fa7f 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800174e:	2210      	movs	r2, #16
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	@ 0x78
 8001754:	f000 fa7a 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001758:	22b0      	movs	r2, #176	@ 0xb0
 800175a:	2100      	movs	r1, #0
 800175c:	2078      	movs	r0, #120	@ 0x78
 800175e:	f000 fa75 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001762:	22c8      	movs	r2, #200	@ 0xc8
 8001764:	2100      	movs	r1, #0
 8001766:	2078      	movs	r0, #120	@ 0x78
 8001768:	f000 fa70 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2078      	movs	r0, #120	@ 0x78
 8001772:	f000 fa6b 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001776:	2210      	movs	r2, #16
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	@ 0x78
 800177c:	f000 fa66 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001780:	2240      	movs	r2, #64	@ 0x40
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	@ 0x78
 8001786:	f000 fa61 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800178a:	2281      	movs	r2, #129	@ 0x81
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	@ 0x78
 8001790:	f000 fa5c 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001794:	22ff      	movs	r2, #255	@ 0xff
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	@ 0x78
 800179a:	f000 fa57 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800179e:	22a1      	movs	r2, #161	@ 0xa1
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	@ 0x78
 80017a4:	f000 fa52 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017a8:	22a6      	movs	r2, #166	@ 0xa6
 80017aa:	2100      	movs	r1, #0
 80017ac:	2078      	movs	r0, #120	@ 0x78
 80017ae:	f000 fa4d 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017b2:	22a8      	movs	r2, #168	@ 0xa8
 80017b4:	2100      	movs	r1, #0
 80017b6:	2078      	movs	r0, #120	@ 0x78
 80017b8:	f000 fa48 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80017bc:	223f      	movs	r2, #63	@ 0x3f
 80017be:	2100      	movs	r1, #0
 80017c0:	2078      	movs	r0, #120	@ 0x78
 80017c2:	f000 fa43 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017c6:	22a4      	movs	r2, #164	@ 0xa4
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	@ 0x78
 80017cc:	f000 fa3e 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017d0:	22d3      	movs	r2, #211	@ 0xd3
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	@ 0x78
 80017d6:	f000 fa39 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	@ 0x78
 80017e0:	f000 fa34 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017e4:	22d5      	movs	r2, #213	@ 0xd5
 80017e6:	2100      	movs	r1, #0
 80017e8:	2078      	movs	r0, #120	@ 0x78
 80017ea:	f000 fa2f 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80017ee:	22f0      	movs	r2, #240	@ 0xf0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	@ 0x78
 80017f4:	f000 fa2a 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017f8:	22d9      	movs	r2, #217	@ 0xd9
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	@ 0x78
 80017fe:	f000 fa25 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001802:	2222      	movs	r2, #34	@ 0x22
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	@ 0x78
 8001808:	f000 fa20 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800180c:	22da      	movs	r2, #218	@ 0xda
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	@ 0x78
 8001812:	f000 fa1b 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001816:	2212      	movs	r2, #18
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	@ 0x78
 800181c:	f000 fa16 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001820:	22db      	movs	r2, #219	@ 0xdb
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	@ 0x78
 8001826:	f000 fa11 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800182a:	2220      	movs	r2, #32
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	@ 0x78
 8001830:	f000 fa0c 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001834:	228d      	movs	r2, #141	@ 0x8d
 8001836:	2100      	movs	r1, #0
 8001838:	2078      	movs	r0, #120	@ 0x78
 800183a:	f000 fa07 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800183e:	2214      	movs	r2, #20
 8001840:	2100      	movs	r1, #0
 8001842:	2078      	movs	r0, #120	@ 0x78
 8001844:	f000 fa02 	bl	8001c4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001848:	22af      	movs	r2, #175	@ 0xaf
 800184a:	2100      	movs	r1, #0
 800184c:	2078      	movs	r0, #120	@ 0x78
 800184e:	f000 f9fd 	bl	8001c4c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001852:	222e      	movs	r2, #46	@ 0x2e
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	@ 0x78
 8001858:	f000 f9f8 	bl	8001c4c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800185c:	2000      	movs	r0, #0
 800185e:	f000 f843 	bl	80018e8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001862:	f000 f813 	bl	800188c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <SSD1306_Init+0x184>)
 8001868:	2200      	movs	r2, #0
 800186a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <SSD1306_Init+0x184>)
 800186e:	2200      	movs	r2, #0
 8001870:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001872:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SSD1306_Init+0x184>)
 8001874:	2201      	movs	r2, #1
 8001876:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000090 	.word	0x20000090
 8001888:	20000644 	.word	0x20000644

0800188c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001892:	2300      	movs	r3, #0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	e01d      	b.n	80018d4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	3b50      	subs	r3, #80	@ 0x50
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	@ 0x78
 80018a4:	f000 f9d2 	bl	8001c4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	2078      	movs	r0, #120	@ 0x78
 80018ae:	f000 f9cd 	bl	8001c4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018b2:	2210      	movs	r2, #16
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	@ 0x78
 80018b8:	f000 f9c8 	bl	8001c4c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	01db      	lsls	r3, r3, #7
 80018c0:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <SSD1306_UpdateScreen+0x58>)
 80018c2:	441a      	add	r2, r3
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	2140      	movs	r1, #64	@ 0x40
 80018c8:	2078      	movs	r0, #120	@ 0x78
 80018ca:	f000 f959 	bl	8001b80 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	3301      	adds	r3, #1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	d9de      	bls.n	8001898 <SSD1306_UpdateScreen+0xc>
	}
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000244 	.word	0x20000244

080018e8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <SSD1306_Fill+0x14>
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <SSD1306_Fill+0x16>
 80018fc:	23ff      	movs	r3, #255	@ 0xff
 80018fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001902:	4619      	mov	r1, r3
 8001904:	4803      	ldr	r0, [pc, #12]	@ (8001914 <SSD1306_Fill+0x2c>)
 8001906:	f005 fc89 	bl	800721c <memset>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000244 	.word	0x20000244

08001918 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	460b      	mov	r3, r1
 8001924:	80bb      	strh	r3, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	70fb      	strb	r3, [r7, #3]
	if (
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	2b7f      	cmp	r3, #127	@ 0x7f
 800192e:	d848      	bhi.n	80019c2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	2b3f      	cmp	r3, #63	@ 0x3f
 8001934:	d845      	bhi.n	80019c2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001936:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <SSD1306_DrawPixel+0xb4>)
 8001938:	791b      	ldrb	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d11a      	bne.n	8001988 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001952:	88fa      	ldrh	r2, [r7, #6]
 8001954:	88bb      	ldrh	r3, [r7, #4]
 8001956:	08db      	lsrs	r3, r3, #3
 8001958:	b298      	uxth	r0, r3
 800195a:	4603      	mov	r3, r0
 800195c:	01db      	lsls	r3, r3, #7
 800195e:	4413      	add	r3, r2
 8001960:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <SSD1306_DrawPixel+0xb8>)
 8001962:	5cd3      	ldrb	r3, [r2, r3]
 8001964:	b25a      	sxtb	r2, r3
 8001966:	88bb      	ldrh	r3, [r7, #4]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b259      	sxtb	r1, r3
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	4603      	mov	r3, r0
 800197c:	01db      	lsls	r3, r3, #7
 800197e:	4413      	add	r3, r2
 8001980:	b2c9      	uxtb	r1, r1
 8001982:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <SSD1306_DrawPixel+0xb8>)
 8001984:	54d1      	strb	r1, [r2, r3]
 8001986:	e01d      	b.n	80019c4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	b298      	uxth	r0, r3
 8001990:	4603      	mov	r3, r0
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	4413      	add	r3, r2
 8001996:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <SSD1306_DrawPixel+0xb8>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	b25a      	sxtb	r2, r3
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	4013      	ands	r3, r2
 80019b0:	b259      	sxtb	r1, r3
 80019b2:	88fa      	ldrh	r2, [r7, #6]
 80019b4:	4603      	mov	r3, r0
 80019b6:	01db      	lsls	r3, r3, #7
 80019b8:	4413      	add	r3, r2
 80019ba:	b2c9      	uxtb	r1, r1
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <SSD1306_DrawPixel+0xb8>)
 80019be:	54d1      	strb	r1, [r2, r3]
 80019c0:	e000      	b.n	80019c4 <SSD1306_DrawPixel+0xac>
		return;
 80019c2:	bf00      	nop
	}
}
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000644 	.word	0x20000644
 80019d0:	20000244 	.word	0x20000244

080019d4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	80fb      	strh	r3, [r7, #6]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019e4:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <SSD1306_GotoXY+0x28>)
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019ea:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <SSD1306_GotoXY+0x28>)
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	8053      	strh	r3, [r2, #2]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000644 	.word	0x20000644

08001a00 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a10:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
	if (
 8001a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a1e:	dc07      	bgt.n	8001a30 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a20:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001a22:	885b      	ldrh	r3, [r3, #2]
 8001a24:	461a      	mov	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a2e:	dd01      	ble.n	8001a34 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e05d      	b.n	8001af0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e04b      	b.n	8001ad2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	3b20      	subs	r3, #32
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	7849      	ldrb	r1, [r1, #1]
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	440b      	add	r3, r1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e030      	b.n	8001ac0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d010      	beq.n	8001a90 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001a7c:	885a      	ldrh	r2, [r3, #2]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	79ba      	ldrb	r2, [r7, #6]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff ff45 	bl	8001918 <SSD1306_DrawPixel>
 8001a8e:	e014      	b.n	8001aba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001a92:	881a      	ldrh	r2, [r3, #0]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b298      	uxth	r0, r3
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001a9e:	885a      	ldrh	r2, [r3, #2]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f7ff ff2f 	bl	8001918 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	3301      	adds	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d3c8      	bcc.n	8001a5e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d3ad      	bcc.n	8001a3a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <SSD1306_Putc+0xf8>)
 8001aec:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000644 	.word	0x20000644

08001afc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	4613      	mov	r3, r2
 8001b08:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b0a:	e012      	b.n	8001b32 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff73 	bl	8001a00 <SSD1306_Putc>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d002      	beq.n	8001b2c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	e008      	b.n	8001b3e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e8      	bne.n	8001b0c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fecc 	bl	80018e8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b50:	f7ff fe9c 	bl	800188c <SSD1306_UpdateScreen>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <ssd1306_I2C_Init+0x24>)
 8001b60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b62:	e002      	b.n	8001b6a <ssd1306_I2C_Init+0x12>
		p--;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	0003d090 	.word	0x0003d090

08001b80 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b0c7      	sub	sp, #284	@ 0x11c
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	4604      	mov	r4, r0
 8001b88:	4608      	mov	r0, r1
 8001b8a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001b8e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001b92:	600a      	str	r2, [r1, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b9a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ba6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001baa:	4602      	mov	r2, r0
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bb2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bc2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bc6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001bca:	7812      	ldrb	r2, [r2, #0]
 8001bcc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001bd4:	e015      	b.n	8001c02 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001bd6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bde:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	441a      	add	r2, r3
 8001be6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bea:	3301      	adds	r3, #1
 8001bec:	7811      	ldrb	r1, [r2, #0]
 8001bee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bf2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001bf6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001bf8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c02:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c0c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c10:	8812      	ldrh	r2, [r2, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d8df      	bhi.n	8001bd6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c1a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b299      	uxth	r1, r3
 8001c22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f107 020c 	add.w	r2, r7, #12
 8001c34:	200a      	movs	r0, #10
 8001c36:	9000      	str	r0, [sp, #0]
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c3a:	f000 fe5f 	bl	80028fc <HAL_I2C_Master_Transmit>
}
 8001c3e:	bf00      	nop
 8001c40:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	20000090 	.word	0x20000090

08001c4c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
 8001c56:	460b      	mov	r3, r1
 8001c58:	71bb      	strb	r3, [r7, #6]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c5e:	79bb      	ldrb	r3, [r7, #6]
 8001c60:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c62:	797b      	ldrb	r3, [r7, #5]
 8001c64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	f107 020c 	add.w	r2, r7, #12
 8001c6e:	230a      	movs	r3, #10
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2302      	movs	r3, #2
 8001c74:	4803      	ldr	r0, [pc, #12]	@ (8001c84 <ssd1306_I2C_Write+0x38>)
 8001c76:	f000 fe41 	bl	80028fc <HAL_I2C_Master_Transmit>
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000090 	.word	0x20000090

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	f06f 0001 	mvn.w	r0, #1
 8001cc6:	f000 fac6 	bl	8002256 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <HAL_MspInit+0x6c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_MspInit+0x6c>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000

08001cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <HAL_I2C_MspInit+0x70>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d123      	bne.n	8001d60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <HAL_I2C_MspInit+0x74>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <HAL_I2C_MspInit+0x74>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <HAL_I2C_MspInit+0x74>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d30:	23c0      	movs	r3, #192	@ 0xc0
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <HAL_I2C_MspInit+0x78>)
 8001d44:	f000 fab2 	bl	80022ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <HAL_I2C_MspInit+0x74>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <HAL_I2C_MspInit+0x74>)
 8001d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_I2C_MspInit+0x74>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010c00 	.word	0x40010c00

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <HAL_TIM_Base_MspInit+0x58>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10c      	bne.n	8001da0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d90:	6193      	str	r3, [r2, #24]
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d9e:	e010      	b.n	8001dc2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da8:	d10b      	bne.n	8001dc2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a37      	ldr	r2, [pc, #220]	@ (8001ecc <HAL_UART_MspInit+0xf8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d132      	bne.n	8001e5a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df4:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a35      	ldr	r2, [pc, #212]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b33      	ldr	r3, [pc, #204]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	4619      	mov	r1, r3
 8001e38:	4826      	ldr	r0, [pc, #152]	@ (8001ed4 <HAL_UART_MspInit+0x100>)
 8001e3a:	f000 fa37 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4820      	ldr	r0, [pc, #128]	@ (8001ed4 <HAL_UART_MspInit+0x100>)
 8001e54:	f000 fa2a 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e58:	e034      	b.n	8001ec4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <HAL_UART_MspInit+0x104>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d12f      	bne.n	8001ec4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6e:	61d3      	str	r3, [r2, #28]
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e94:	2304      	movs	r3, #4
 8001e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0318 	add.w	r3, r7, #24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480b      	ldr	r0, [pc, #44]	@ (8001ed4 <HAL_UART_MspInit+0x100>)
 8001ea8:	f000 fa00 	bl	80022ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001eac:	2308      	movs	r3, #8
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <HAL_UART_MspInit+0x100>)
 8001ec0:	f000 f9f4 	bl	80022ac <HAL_GPIO_Init>
}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	@ 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	40004400 	.word	0x40004400

08001edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08e      	sub	sp, #56	@ 0x38
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef2:	4b34      	ldr	r3, [pc, #208]	@ (8001fc4 <HAL_InitTick+0xe8>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a33      	ldr	r2, [pc, #204]	@ (8001fc4 <HAL_InitTick+0xe8>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <HAL_InitTick+0xe8>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f0a:	f107 0210 	add.w	r2, r7, #16
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 fd69 	bl	80039ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d103      	bne.n	8001f2c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f24:	f001 fd3a 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8001f28:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f2a:	e004      	b.n	8001f36 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f2c:	f001 fd36 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f38:	4a23      	ldr	r2, [pc, #140]	@ (8001fc8 <HAL_InitTick+0xec>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	3b01      	subs	r3, #1
 8001f42:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f46:	4a22      	ldr	r2, [pc, #136]	@ (8001fd0 <HAL_InitTick+0xf4>)
 8001f48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f50:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001f52:	4a1e      	ldr	r2, [pc, #120]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f56:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001f6a:	4818      	ldr	r0, [pc, #96]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f6c:	f001 fd8c 	bl	8003a88 <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001f7e:	4813      	ldr	r0, [pc, #76]	@ (8001fcc <HAL_InitTick+0xf0>)
 8001f80:	f001 fe1c 	bl	8003bbc <HAL_TIM_Base_Start_IT>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d111      	bne.n	8001fb6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f92:	201d      	movs	r0, #29
 8001f94:	f000 f97b 	bl	800228e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	d808      	bhi.n	8001fb0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	201d      	movs	r0, #29
 8001fa4:	f000 f957 	bl	8002256 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_InitTick+0xf8>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e002      	b.n	8001fb6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fb6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3738      	adds	r7, #56	@ 0x38
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	431bde83 	.word	0x431bde83
 8001fcc:	2000064c 	.word	0x2000064c
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	20000018 	.word	0x20000018

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <NMI_Handler+0x4>

08001fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <MemManage_Handler+0x4>

08001ff0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <UsageFault_Handler+0x4>

08002000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8002010:	2002      	movs	r0, #2
 8002012:	f000 fb17 	bl	8002644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <TIM3_IRQHandler+0x10>)
 8002022:	f001 fe1d 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000064c 	.word	0x2000064c

08002030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800203c:	f7ff fff8 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002040:	480b      	ldr	r0, [pc, #44]	@ (8002070 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002042:	490c      	ldr	r1, [pc, #48]	@ (8002074 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002044:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a09      	ldr	r2, [pc, #36]	@ (800207c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002058:	4c09      	ldr	r4, [pc, #36]	@ (8002080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002066:	f005 f937 	bl	80072d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800206a:	f7fe fcdd 	bl	8000a28 <main>
  bx lr
 800206e:	4770      	bx	lr
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002078:	08007c70 	.word	0x08007c70
  ldr r2, =_sbss
 800207c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002080:	200021b4 	.word	0x200021b4

08002084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_2_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_Init+0x28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <HAL_Init+0x28>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 f8d1 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	200f      	movs	r0, #15
 80020a0:	f7ff ff1c 	bl	8001edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fdf0 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_IncTick+0x1c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_IncTick+0x20>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	4a03      	ldr	r2, [pc, #12]	@ (80020d4 <HAL_IncTick+0x20>)
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	2000001c 	.word	0x2000001c
 80020d4:	20000694 	.word	0x20000694

080020d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <HAL_GetTick+0x10>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20000694 	.word	0x20000694

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4906      	ldr	r1, [pc, #24]	@ (8002184 <__NVIC_EnableIRQ+0x34>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	@ (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	@ 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff4f 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff64 	bl	8002134 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ffb2 	bl	80021dc <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff81 	bl	8002188 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff57 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b08b      	sub	sp, #44	@ 0x2c
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e169      	b.n	8002594 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c0:	2201      	movs	r2, #1
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8158 	bne.w	800258e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a9a      	ldr	r2, [pc, #616]	@ (800254c <HAL_GPIO_Init+0x2a0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d05e      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 80022e8:	4a98      	ldr	r2, [pc, #608]	@ (800254c <HAL_GPIO_Init+0x2a0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d875      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 80022ee:	4a98      	ldr	r2, [pc, #608]	@ (8002550 <HAL_GPIO_Init+0x2a4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d058      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 80022f4:	4a96      	ldr	r2, [pc, #600]	@ (8002550 <HAL_GPIO_Init+0x2a4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d86f      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 80022fa:	4a96      	ldr	r2, [pc, #600]	@ (8002554 <HAL_GPIO_Init+0x2a8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d052      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 8002300:	4a94      	ldr	r2, [pc, #592]	@ (8002554 <HAL_GPIO_Init+0x2a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d869      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002306:	4a94      	ldr	r2, [pc, #592]	@ (8002558 <HAL_GPIO_Init+0x2ac>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d04c      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 800230c:	4a92      	ldr	r2, [pc, #584]	@ (8002558 <HAL_GPIO_Init+0x2ac>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d863      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002312:	4a92      	ldr	r2, [pc, #584]	@ (800255c <HAL_GPIO_Init+0x2b0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d046      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 8002318:	4a90      	ldr	r2, [pc, #576]	@ (800255c <HAL_GPIO_Init+0x2b0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d85d      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 800231e:	2b12      	cmp	r3, #18
 8002320:	d82a      	bhi.n	8002378 <HAL_GPIO_Init+0xcc>
 8002322:	2b12      	cmp	r3, #18
 8002324:	d859      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002326:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <HAL_GPIO_Init+0x80>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	080023a7 	.word	0x080023a7
 8002330:	08002381 	.word	0x08002381
 8002334:	08002393 	.word	0x08002393
 8002338:	080023d5 	.word	0x080023d5
 800233c:	080023db 	.word	0x080023db
 8002340:	080023db 	.word	0x080023db
 8002344:	080023db 	.word	0x080023db
 8002348:	080023db 	.word	0x080023db
 800234c:	080023db 	.word	0x080023db
 8002350:	080023db 	.word	0x080023db
 8002354:	080023db 	.word	0x080023db
 8002358:	080023db 	.word	0x080023db
 800235c:	080023db 	.word	0x080023db
 8002360:	080023db 	.word	0x080023db
 8002364:	080023db 	.word	0x080023db
 8002368:	080023db 	.word	0x080023db
 800236c:	080023db 	.word	0x080023db
 8002370:	08002389 	.word	0x08002389
 8002374:	0800239d 	.word	0x0800239d
 8002378:	4a79      	ldr	r2, [pc, #484]	@ (8002560 <HAL_GPIO_Init+0x2b4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800237e:	e02c      	b.n	80023da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e029      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	3304      	adds	r3, #4
 800238e:	623b      	str	r3, [r7, #32]
          break;
 8002390:	e024      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	3308      	adds	r3, #8
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e01f      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	330c      	adds	r3, #12
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e01a      	b.n	80023dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ae:	2304      	movs	r3, #4
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e013      	b.n	80023dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023bc:	2308      	movs	r3, #8
 80023be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	611a      	str	r2, [r3, #16]
          break;
 80023c6:	e009      	b.n	80023dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c8:	2308      	movs	r3, #8
 80023ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	615a      	str	r2, [r3, #20]
          break;
 80023d2:	e003      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
          break;
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x130>
          break;
 80023da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2bff      	cmp	r3, #255	@ 0xff
 80023e0:	d801      	bhi.n	80023e6 <HAL_GPIO_Init+0x13a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	e001      	b.n	80023ea <HAL_GPIO_Init+0x13e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2bff      	cmp	r3, #255	@ 0xff
 80023f0:	d802      	bhi.n	80023f8 <HAL_GPIO_Init+0x14c>
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x152>
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	3b08      	subs	r3, #8
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	210f      	movs	r1, #15
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	401a      	ands	r2, r3
 8002410:	6a39      	ldr	r1, [r7, #32]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80b1 	beq.w	800258e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800242c:	4b4d      	ldr	r3, [pc, #308]	@ (8002564 <HAL_GPIO_Init+0x2b8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a4c      	ldr	r2, [pc, #304]	@ (8002564 <HAL_GPIO_Init+0x2b8>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b4a      	ldr	r3, [pc, #296]	@ (8002564 <HAL_GPIO_Init+0x2b8>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002444:	4a48      	ldr	r2, [pc, #288]	@ (8002568 <HAL_GPIO_Init+0x2bc>)
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a40      	ldr	r2, [pc, #256]	@ (800256c <HAL_GPIO_Init+0x2c0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_Init+0x1ec>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3f      	ldr	r2, [pc, #252]	@ (8002570 <HAL_GPIO_Init+0x2c4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1e8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3e      	ldr	r2, [pc, #248]	@ (8002574 <HAL_GPIO_Init+0x2c8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1e4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3d      	ldr	r2, [pc, #244]	@ (8002578 <HAL_GPIO_Init+0x2cc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1e0>
 8002488:	2303      	movs	r3, #3
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 800248c:	2304      	movs	r3, #4
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002498:	2300      	movs	r3, #0
 800249a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024aa:	492f      	ldr	r1, [pc, #188]	@ (8002568 <HAL_GPIO_Init+0x2bc>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024c4:	4b2d      	ldr	r3, [pc, #180]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	492c      	ldr	r1, [pc, #176]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4928      	ldr	r1, [pc, #160]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024ec:	4b23      	ldr	r3, [pc, #140]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	4922      	ldr	r1, [pc, #136]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	491e      	ldr	r1, [pc, #120]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 8002504:	4013      	ands	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4918      	ldr	r1, [pc, #96]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4914      	ldr	r1, [pc, #80]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 800252c:	4013      	ands	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	490e      	ldr	r1, [pc, #56]	@ (800257c <HAL_GPIO_Init+0x2d0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e021      	b.n	800258e <HAL_GPIO_Init+0x2e2>
 800254a:	bf00      	nop
 800254c:	10320000 	.word	0x10320000
 8002550:	10310000 	.word	0x10310000
 8002554:	10220000 	.word	0x10220000
 8002558:	10210000 	.word	0x10210000
 800255c:	10120000 	.word	0x10120000
 8002560:	10110000 	.word	0x10110000
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	40011000 	.word	0x40011000
 8002578:	40011400 	.word	0x40011400
 800257c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_GPIO_Init+0x304>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	43db      	mvns	r3, r3
 8002588:	4909      	ldr	r1, [pc, #36]	@ (80025b0 <HAL_GPIO_Init+0x304>)
 800258a:	4013      	ands	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f47f ae8e 	bne.w	80022c0 <HAL_GPIO_Init+0x14>
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	372c      	adds	r7, #44	@ 0x2c
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
 80025ee:	4613      	mov	r3, r2
 80025f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f2:	787b      	ldrb	r3, [r7, #1]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f8:	887a      	ldrh	r2, [r7, #2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025fe:	e003      	b.n	8002608 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	041a      	lsls	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	041a      	lsls	r2, r3, #16
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43d9      	mvns	r1, r3
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	400b      	ands	r3, r1
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265a:	4a05      	ldr	r2, [pc, #20]	@ (8002670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fcb8 	bl	8000fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e12b      	b.n	80028de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fb2c 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2224      	movs	r2, #36	@ 0x24
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d8:	f001 f960 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80026dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a81      	ldr	r2, [pc, #516]	@ (80028e8 <HAL_I2C_Init+0x274>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d807      	bhi.n	80026f8 <HAL_I2C_Init+0x84>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a80      	ldr	r2, [pc, #512]	@ (80028ec <HAL_I2C_Init+0x278>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	bf94      	ite	ls
 80026f0:	2301      	movls	r3, #1
 80026f2:	2300      	movhi	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e006      	b.n	8002706 <HAL_I2C_Init+0x92>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4a7d      	ldr	r2, [pc, #500]	@ (80028f0 <HAL_I2C_Init+0x27c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	bf94      	ite	ls
 8002700:	2301      	movls	r3, #1
 8002702:	2300      	movhi	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0e7      	b.n	80028de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a78      	ldr	r2, [pc, #480]	@ (80028f4 <HAL_I2C_Init+0x280>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9b      	lsrs	r3, r3, #18
 8002718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a6a      	ldr	r2, [pc, #424]	@ (80028e8 <HAL_I2C_Init+0x274>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d802      	bhi.n	8002748 <HAL_I2C_Init+0xd4>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3301      	adds	r3, #1
 8002746:	e009      	b.n	800275c <HAL_I2C_Init+0xe8>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	4a69      	ldr	r2, [pc, #420]	@ (80028f8 <HAL_I2C_Init+0x284>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	3301      	adds	r3, #1
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	430b      	orrs	r3, r1
 8002762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800276e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	495c      	ldr	r1, [pc, #368]	@ (80028e8 <HAL_I2C_Init+0x274>)
 8002778:	428b      	cmp	r3, r1
 800277a:	d819      	bhi.n	80027b0 <HAL_I2C_Init+0x13c>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e59      	subs	r1, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fbb1 f3f3 	udiv	r3, r1, r3
 800278a:	1c59      	adds	r1, r3, #1
 800278c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002790:	400b      	ands	r3, r1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_I2C_Init+0x138>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e59      	subs	r1, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027aa:	e051      	b.n	8002850 <HAL_I2C_Init+0x1dc>
 80027ac:	2304      	movs	r3, #4
 80027ae:	e04f      	b.n	8002850 <HAL_I2C_Init+0x1dc>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d111      	bne.n	80027dc <HAL_I2C_Init+0x168>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e012      	b.n	8002802 <HAL_I2C_Init+0x18e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1e58      	subs	r0, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	0099      	lsls	r1, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x196>
 8002806:	2301      	movs	r3, #1
 8002808:	e022      	b.n	8002850 <HAL_I2C_Init+0x1dc>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10e      	bne.n	8002830 <HAL_I2C_Init+0x1bc>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1e58      	subs	r0, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	440b      	add	r3, r1
 8002820:	fbb0 f3f3 	udiv	r3, r0, r3
 8002824:	3301      	adds	r3, #1
 8002826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282e:	e00f      	b.n	8002850 <HAL_I2C_Init+0x1dc>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	0099      	lsls	r1, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	fbb0 f3f3 	udiv	r3, r0, r3
 8002846:	3301      	adds	r3, #1
 8002848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	6809      	ldr	r1, [r1, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800287e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6911      	ldr	r1, [r2, #16]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68d2      	ldr	r2, [r2, #12]
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	430b      	orrs	r3, r1
 8002892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	000186a0 	.word	0x000186a0
 80028ec:	001e847f 	.word	0x001e847f
 80028f0:	003d08ff 	.word	0x003d08ff
 80028f4:	431bde83 	.word	0x431bde83
 80028f8:	10624dd3 	.word	0x10624dd3

080028fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	461a      	mov	r2, r3
 8002908:	460b      	mov	r3, r1
 800290a:	817b      	strh	r3, [r7, #10]
 800290c:	4613      	mov	r3, r2
 800290e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff fbe2 	bl	80020d8 <HAL_GetTick>
 8002914:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	f040 80e0 	bne.w	8002ae4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2319      	movs	r3, #25
 800292a:	2201      	movs	r2, #1
 800292c:	4970      	ldr	r1, [pc, #448]	@ (8002af0 <HAL_I2C_Master_Transmit+0x1f4>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fa92 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
 800293c:	e0d3      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_I2C_Master_Transmit+0x50>
 8002948:	2302      	movs	r3, #2
 800294a:	e0cc      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ea>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d007      	beq.n	8002972 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002980:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2221      	movs	r2, #33	@ 0x21
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2210      	movs	r2, #16
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	893a      	ldrh	r2, [r7, #8]
 80029a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a50      	ldr	r2, [pc, #320]	@ (8002af4 <HAL_I2C_Master_Transmit+0x1f8>)
 80029b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9ca 	bl	8002d54 <I2C_MasterRequestWrite>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e08d      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029e0:	e066      	b.n	8002ab0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fb50 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d107      	bne.n	8002a0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06b      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d11b      	bne.n	8002a84 <HAL_I2C_Master_Transmit+0x188>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d017      	beq.n	8002a84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6a39      	ldr	r1, [r7, #32]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fb47 	bl	800311c <I2C_WaitOnBTFFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d107      	bne.n	8002aac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e01a      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d194      	bne.n	80029e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	00100002 	.word	0x00100002
 8002af4:	ffff0000 	.word	0xffff0000

08002af8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	@ 0x28
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	460b      	mov	r3, r1
 8002b06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff fae6 	bl	80020d8 <HAL_GetTick>
 8002b0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	f040 8111 	bne.w	8002d42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2319      	movs	r3, #25
 8002b26:	2201      	movs	r2, #1
 8002b28:	4988      	ldr	r1, [pc, #544]	@ (8002d4c <HAL_I2C_IsDeviceReady+0x254>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f994 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
 8002b38:	e104      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_I2C_IsDeviceReady+0x50>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e0fd      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x24c>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d007      	beq.n	8002b6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2224      	movs	r2, #36	@ 0x24
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a70      	ldr	r2, [pc, #448]	@ (8002d50 <HAL_I2C_IsDeviceReady+0x258>)
 8002b90:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f952 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bc8:	d103      	bne.n	8002bd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0b6      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002be4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002be6:	f7ff fa77 	bl	80020d8 <HAL_GetTick>
 8002bea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c1a:	e025      	b.n	8002c68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c1c:	f7ff fa5c 	bl	80020d8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d302      	bcc.n	8002c32 <HAL_I2C_IsDeviceReady+0x13a>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d103      	bne.n	8002c3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	22a0      	movs	r2, #160	@ 0xa0
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c72:	d005      	beq.n	8002c80 <HAL_I2C_IsDeviceReady+0x188>
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_I2C_IsDeviceReady+0x188>
 8002c7a:	7dbb      	ldrb	r3, [r7, #22]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0cd      	beq.n	8002c1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d129      	bne.n	8002cea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4921      	ldr	r1, [pc, #132]	@ (8002d4c <HAL_I2C_IsDeviceReady+0x254>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f8c6 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e036      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e02c      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2319      	movs	r3, #25
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	490f      	ldr	r1, [pc, #60]	@ (8002d4c <HAL_I2C_IsDeviceReady+0x254>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f8a2 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e012      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	f4ff af32 	bcc.w	8002b92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	00100002 	.word	0x00100002
 8002d50:	ffff0000 	.word	0xffff0000

08002d54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	460b      	mov	r3, r1
 8002d62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d006      	beq.n	8002d7e <I2C_MasterRequestWrite+0x2a>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d003      	beq.n	8002d7e <I2C_MasterRequestWrite+0x2a>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d7c:	d108      	bne.n	8002d90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e00b      	b.n	8002da8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	2b12      	cmp	r3, #18
 8002d96:	d107      	bne.n	8002da8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f84f 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dce:	d103      	bne.n	8002dd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e035      	b.n	8002e48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002de4:	d108      	bne.n	8002df8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	e01b      	b.n	8002e30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002df8:	897b      	ldrh	r3, [r7, #10]
 8002dfa:	11db      	asrs	r3, r3, #7
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0306 	and.w	r3, r3, #6
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f063 030f 	orn	r3, r3, #15
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	490e      	ldr	r1, [pc, #56]	@ (8002e50 <I2C_MasterRequestWrite+0xfc>)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f898 	bl	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e010      	b.n	8002e48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4907      	ldr	r1, [pc, #28]	@ (8002e54 <I2C_MasterRequestWrite+0x100>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f888 	bl	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	00010008 	.word	0x00010008
 8002e54:	00010002 	.word	0x00010002

08002e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e68:	e048      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d044      	beq.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff f931 	bl	80020d8 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d139      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	e00c      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d116      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e023      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10d      	bne.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	e00c      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d093      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f5a:	e071      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6a:	d123      	bne.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e067      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d041      	beq.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7ff f88c 	bl	80020d8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d136      	bne.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e00b      	b.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e021      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10c      	bne.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e00b      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f af6d 	bne.w	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003098:	e034      	b.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f886 	bl	80031ac <I2C_IsAcknowledgeFailed>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e034      	b.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d028      	beq.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7ff f811 	bl	80020d8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11d      	bne.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d2:	2b80      	cmp	r3, #128	@ 0x80
 80030d4:	d016      	beq.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310e:	2b80      	cmp	r3, #128	@ 0x80
 8003110:	d1c3      	bne.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003128:	e034      	b.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f83e 	bl	80031ac <I2C_IsAcknowledgeFailed>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e034      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d028      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7fe ffc9 	bl	80020d8 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11d      	bne.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d016      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e007      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d1c3      	bne.n	800312a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c2:	d11b      	bne.n	80031fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0204 	orr.w	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e272      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8087 	beq.w	8003336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003228:	4b92      	ldr	r3, [pc, #584]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b04      	cmp	r3, #4
 8003232:	d00c      	beq.n	800324e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003234:	4b8f      	ldr	r3, [pc, #572]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d112      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
 8003240:	4b8c      	ldr	r3, [pc, #560]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b89      	ldr	r3, [pc, #548]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d06c      	beq.n	8003334 <HAL_RCC_OscConfig+0x12c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d168      	bne.n	8003334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e24c      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x76>
 8003270:	4b80      	ldr	r3, [pc, #512]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7f      	ldr	r2, [pc, #508]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b7b      	ldr	r3, [pc, #492]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7a      	ldr	r2, [pc, #488]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b78      	ldr	r3, [pc, #480]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a77      	ldr	r2, [pc, #476]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0xbc>
 80032aa:	4b72      	ldr	r3, [pc, #456]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a71      	ldr	r2, [pc, #452]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b68      	ldr	r3, [pc, #416]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a67      	ldr	r2, [pc, #412]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fef8 	bl	80020d8 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fef4 	bl	80020d8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e200      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xe4>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe fee4 	bl	80020d8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7fe fee0 	bl	80020d8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1ec      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x10c>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d063      	beq.n	800340a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003342:	4b4c      	ldr	r3, [pc, #304]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334e:	4b49      	ldr	r3, [pc, #292]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x18c>
 800335a:	4b46      	ldr	r3, [pc, #280]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b43      	ldr	r3, [pc, #268]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x176>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1c0      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b3d      	ldr	r3, [pc, #244]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4939      	ldr	r1, [pc, #228]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e03a      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b36      	ldr	r3, [pc, #216]	@ (8003478 <HAL_RCC_OscConfig+0x270>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fe99 	bl	80020d8 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fe fe95 	bl	80020d8 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1a1      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4927      	ldr	r1, [pc, #156]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <HAL_RCC_OscConfig+0x270>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe fe78 	bl	80020d8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ec:	f7fe fe74 	bl	80020d8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e180      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03a      	beq.n	800348c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d019      	beq.n	8003452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b17      	ldr	r3, [pc, #92]	@ (800347c <HAL_RCC_OscConfig+0x274>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7fe fe58 	bl	80020d8 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7fe fe54 	bl	80020d8 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e160      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800344a:	2001      	movs	r0, #1
 800344c:	f000 fafe 	bl	8003a4c <RCC_Delay>
 8003450:	e01c      	b.n	800348c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003452:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <HAL_RCC_OscConfig+0x274>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003458:	f7fe fe3e 	bl	80020d8 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345e:	e00f      	b.n	8003480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003460:	f7fe fe3a 	bl	80020d8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d908      	bls.n	8003480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e146      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	42420000 	.word	0x42420000
 800347c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b92      	ldr	r3, [pc, #584]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e9      	bne.n	8003460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a6 	beq.w	80035e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b8b      	ldr	r3, [pc, #556]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	4b88      	ldr	r3, [pc, #544]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a87      	ldr	r2, [pc, #540]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]
 80034b6:	4b85      	ldr	r3, [pc, #532]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b82      	ldr	r3, [pc, #520]	@ (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b7f      	ldr	r3, [pc, #508]	@ (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a7e      	ldr	r2, [pc, #504]	@ (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fe fdfb 	bl	80020d8 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe fdf7 	bl	80020d8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	@ 0x64
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e103      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b75      	ldr	r3, [pc, #468]	@ (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x312>
 800350c:	4b6f      	ldr	r3, [pc, #444]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a6e      	ldr	r2, [pc, #440]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6213      	str	r3, [r2, #32]
 8003518:	e02d      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x334>
 8003522:	4b6a      	ldr	r3, [pc, #424]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a69      	ldr	r2, [pc, #420]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	4b67      	ldr	r3, [pc, #412]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a66      	ldr	r2, [pc, #408]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6213      	str	r3, [r2, #32]
 800353a:	e01c      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b05      	cmp	r3, #5
 8003542:	d10c      	bne.n	800355e <HAL_RCC_OscConfig+0x356>
 8003544:	4b61      	ldr	r3, [pc, #388]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4a60      	ldr	r2, [pc, #384]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	6213      	str	r3, [r2, #32]
 8003550:	4b5e      	ldr	r3, [pc, #376]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a5d      	ldr	r2, [pc, #372]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	e00b      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800355e:	4b5b      	ldr	r3, [pc, #364]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a5a      	ldr	r2, [pc, #360]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	4b58      	ldr	r3, [pc, #352]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a57      	ldr	r2, [pc, #348]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d015      	beq.n	80035aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fe fdab 	bl	80020d8 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fda7 	bl	80020d8 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0b1      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	4b4b      	ldr	r3, [pc, #300]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ee      	beq.n	8003586 <HAL_RCC_OscConfig+0x37e>
 80035a8:	e014      	b.n	80035d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fd95 	bl	80020d8 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fd91 	bl	80020d8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e09b      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	4b40      	ldr	r3, [pc, #256]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ee      	bne.n	80035b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d105      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035da:	4b3c      	ldr	r3, [pc, #240]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4a3b      	ldr	r2, [pc, #236]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8087 	beq.w	80036fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f0:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d061      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d146      	bne.n	8003692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003604:	4b33      	ldr	r3, [pc, #204]	@ (80036d4 <HAL_RCC_OscConfig+0x4cc>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fd65 	bl	80020d8 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fd61 	bl	80020d8 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e06d      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003624:	4b29      	ldr	r3, [pc, #164]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003638:	d108      	bne.n	800364c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800363a:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4921      	ldr	r1, [pc, #132]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364c:	4b1f      	ldr	r3, [pc, #124]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a19      	ldr	r1, [r3, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	430b      	orrs	r3, r1
 800365e:	491b      	ldr	r1, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fd35 	bl	80020d8 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fd31 	bl	80020d8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e03d      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x46a>
 8003690:	e035      	b.n	80036fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCC_OscConfig+0x4cc>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fd1e 	bl	80020d8 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fd1a 	bl	80020d8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e026      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x498>
 80036be:	e01e      	b.n	80036fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e019      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40007000 	.word	0x40007000
 80036d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_OscConfig+0x500>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000

0800370c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0d0      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003720:	4b6a      	ldr	r3, [pc, #424]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d910      	bls.n	8003750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b67      	ldr	r3, [pc, #412]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 0207 	bic.w	r2, r3, #7
 8003736:	4965      	ldr	r1, [pc, #404]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b63      	ldr	r3, [pc, #396]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b8      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b59      	ldr	r3, [pc, #356]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a58      	ldr	r2, [pc, #352]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003772:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4b53      	ldr	r3, [pc, #332]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a52      	ldr	r2, [pc, #328]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800378a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b50      	ldr	r3, [pc, #320]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	494d      	ldr	r1, [pc, #308]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d040      	beq.n	800382c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b47      	ldr	r3, [pc, #284]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d115      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ca:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e073      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037da:	4b3d      	ldr	r3, [pc, #244]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06b      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ea:	4b39      	ldr	r3, [pc, #228]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f023 0203 	bic.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4936      	ldr	r1, [pc, #216]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037fc:	f7fe fc6c 	bl	80020d8 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fe fc68 	bl	80020d8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e053      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	4b2d      	ldr	r3, [pc, #180]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 020c 	and.w	r2, r3, #12
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	d1eb      	bne.n	8003804 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800382c:	4b27      	ldr	r3, [pc, #156]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d210      	bcs.n	800385c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4922      	ldr	r1, [pc, #136]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e032      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4916      	ldr	r1, [pc, #88]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003886:	4b12      	ldr	r3, [pc, #72]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490e      	ldr	r1, [pc, #56]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389a:	f000 f821 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490a      	ldr	r1, [pc, #40]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x1cc>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038b6:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_ClockConfig+0x1d0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fb0e 	bl	8001edc <HAL_InitTick>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08007c3c 	.word	0x08007c3c
 80038d8:	20000014 	.word	0x20000014
 80038dc:	20000018 	.word	0x20000018

080038e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x94>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b04      	cmp	r3, #4
 8003908:	d002      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x30>
 800390a:	2b08      	cmp	r3, #8
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x36>
 800390e:	e027      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003910:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 8003912:	613b      	str	r3, [r7, #16]
      break;
 8003914:	e027      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0c9b      	lsrs	r3, r3, #18
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	4a17      	ldr	r2, [pc, #92]	@ (800397c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d010      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800392e:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x94>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0c5b      	lsrs	r3, r3, #17
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	4a11      	ldr	r2, [pc, #68]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a0d      	ldr	r2, [pc, #52]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 8003942:	fb03 f202 	mul.w	r2, r3, r2
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e004      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	613b      	str	r3, [r7, #16]
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 8003962:	613b      	str	r3, [r7, #16]
      break;
 8003964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003966:	693b      	ldr	r3, [r7, #16]
}
 8003968:	4618      	mov	r0, r3
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	007a1200 	.word	0x007a1200
 800397c:	08007c54 	.word	0x08007c54
 8003980:	08007c64 	.word	0x08007c64
 8003984:	003d0900 	.word	0x003d0900

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b02      	ldr	r3, [pc, #8]	@ (8003998 <HAL_RCC_GetHCLKFreq+0x10>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	20000014 	.word	0x20000014

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff2 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	@ (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	08007c4c 	.word	0x08007c4c

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffde 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	0adb      	lsrs	r3, r3, #11
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	@ (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	08007c4c 	.word	0x08007c4c

080039ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	220f      	movs	r2, #15
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a08:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a2e:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a54:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <RCC_Delay+0x34>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <RCC_Delay+0x38>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0a5b      	lsrs	r3, r3, #9
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a68:	bf00      	nop
  }
  while (Delay --);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	60fa      	str	r2, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f9      	bne.n	8003a68 <RCC_Delay+0x1c>
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	20000014 	.word	0x20000014
 8003a84:	10624dd3 	.word	0x10624dd3

08003a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e041      	b.n	8003b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe f960 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f000 fabe 	bl	8004048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d001      	beq.n	8003b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e032      	b.n	8003ba6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <HAL_TIM_Base_Start+0x88>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_Base_Start+0x48>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_Base_Start+0x48>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	@ (8003bb4 <HAL_TIM_Base_Start+0x8c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_Base_Start+0x48>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	@ (8003bb8 <HAL_TIM_Base_Start+0x90>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d010      	beq.n	8003ba4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e007      	b.n	8003ba4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d001      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e03a      	b.n	8003c4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <HAL_TIM_Base_Start_IT+0x98>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00e      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x58>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfe:	d009      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x58>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a14      	ldr	r2, [pc, #80]	@ (8003c58 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x58>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <HAL_TIM_Base_Start_IT+0xa0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d111      	bne.n	8003c38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d010      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	e007      	b.n	8003c48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800

08003c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0202 	mvn.w	r2, #2
 8003c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9b4 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9a7 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f9b6 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0204 	mvn.w	r2, #4
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f98a 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f97d 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f98c 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0208 	mvn.w	r2, #8
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f960 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f953 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f962 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d122      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d11b      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f936 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f929 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f938 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0201 	mvn.w	r2, #1
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fc78 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d10e      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfc:	2b80      	cmp	r3, #128	@ 0x80
 8003dfe:	d107      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa7b 	bl	8004306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1a:	2b40      	cmp	r3, #64	@ 0x40
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d107      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8fc 	bl	8004034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0220 	mvn.w	r2, #32
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa46 	bl	80042f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e0b4      	b.n	8003ff6 <HAL_TIM_ConfigClockSource+0x186>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec4:	d03e      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0xd4>
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	f200 8087 	bhi.w	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed2:	f000 8086 	beq.w	8003fe2 <HAL_TIM_ConfigClockSource+0x172>
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d87f      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b70      	cmp	r3, #112	@ 0x70
 8003ede:	d01a      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xa6>
 8003ee0:	2b70      	cmp	r3, #112	@ 0x70
 8003ee2:	d87b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b60      	cmp	r3, #96	@ 0x60
 8003ee6:	d050      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x11a>
 8003ee8:	2b60      	cmp	r3, #96	@ 0x60
 8003eea:	d877      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003eec:	2b50      	cmp	r3, #80	@ 0x50
 8003eee:	d03c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0xfa>
 8003ef0:	2b50      	cmp	r3, #80	@ 0x50
 8003ef2:	d873      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b40      	cmp	r3, #64	@ 0x40
 8003ef6:	d058      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x13a>
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d86f      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b30      	cmp	r3, #48	@ 0x30
 8003efe:	d064      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f00:	2b30      	cmp	r3, #48	@ 0x30
 8003f02:	d86b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d060      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d867      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d05c      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d05a      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	e062      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f26:	f000 f968 	bl	80041fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	609a      	str	r2, [r3, #8]
      break;
 8003f42:	e04f      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f54:	f000 f951 	bl	80041fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f66:	609a      	str	r2, [r3, #8]
      break;
 8003f68:	e03c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	461a      	mov	r2, r3
 8003f78:	f000 f8c8 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2150      	movs	r1, #80	@ 0x50
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f91f 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003f88:	e02c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f96:	461a      	mov	r2, r3
 8003f98:	f000 f8e6 	bl	8004168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2160      	movs	r1, #96	@ 0x60
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f90f 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e01c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 f8a8 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2140      	movs	r1, #64	@ 0x40
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f8ff 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e00c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f000 f8f6 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003fda:	e003      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a29      	ldr	r2, [pc, #164]	@ (8004100 <TIM_Base_SetConfig+0xb8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_Base_SetConfig+0x30>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004066:	d007      	beq.n	8004078 <TIM_Base_SetConfig+0x30>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a26      	ldr	r2, [pc, #152]	@ (8004104 <TIM_Base_SetConfig+0xbc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0x30>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a25      	ldr	r2, [pc, #148]	@ (8004108 <TIM_Base_SetConfig+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <TIM_Base_SetConfig+0xb8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <TIM_Base_SetConfig+0x62>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d007      	beq.n	80040aa <TIM_Base_SetConfig+0x62>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a19      	ldr	r2, [pc, #100]	@ (8004104 <TIM_Base_SetConfig+0xbc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a18      	ldr	r2, [pc, #96]	@ (8004108 <TIM_Base_SetConfig+0xc0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a07      	ldr	r2, [pc, #28]	@ (8004100 <TIM_Base_SetConfig+0xb8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	621a      	str	r2, [r3, #32]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr

080041c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f043 0307 	orr.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	431a      	orrs	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4313      	orrs	r3, r2
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	609a      	str	r2, [r3, #8]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e046      	b.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a16      	ldr	r2, [pc, #88]	@ (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429c:	d009      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a10      	ldr	r2, [pc, #64]	@ (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10c      	bne.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800

080042f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e042      	b.n	80043b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd fd48 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	@ 0x24
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800435a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f91d 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	@ 0x28
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d16d      	bne.n	80044b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Transmit+0x2c>
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e066      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2221      	movs	r2, #33	@ 0x21
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f6:	f7fd fe6f 	bl	80020d8 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	88fa      	ldrh	r2, [r7, #6]
 8004406:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004410:	d108      	bne.n	8004424 <HAL_UART_Transmit+0x6c>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e003      	b.n	800442c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800442c:	e02a      	b.n	8004484 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2180      	movs	r1, #128	@ 0x80
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f840 	bl	80044be <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e036      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3302      	adds	r3, #2
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e007      	b.n	8004476 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3301      	adds	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1cf      	bne.n	800442e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	2140      	movs	r1, #64	@ 0x40
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f810 	bl	80044be <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e006      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b090      	sub	sp, #64	@ 0x40
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ce:	e050      	b.n	8004572 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d04c      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x30>
 80044de:	f7fd fdfb 	bl	80020d8 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d241      	bcs.n	8004572 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800450e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004510:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800451c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004542:	623a      	str	r2, [r7, #32]
 8004544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e5      	bne.n	8004522 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e00f      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	429a      	cmp	r2, r3
 800458e:	d09f      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3740      	adds	r7, #64	@ 0x40
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045d6:	f023 030c 	bic.w	r3, r3, #12
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <UART_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff f9de 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	e002      	b.n	8004612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7ff f9c6 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8004610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a22      	ldr	r2, [pc, #136]	@ (80046b4 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	0119      	lsls	r1, r3, #4
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f2f3 	udiv	r2, r2, r3
 8004648:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <UART_SetConfig+0x118>)
 800464a:	fba3 0302 	umull	r0, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2064      	movs	r0, #100	@ 0x64
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	@ 0x32
 800465c:	4a15      	ldr	r2, [pc, #84]	@ (80046b4 <UART_SetConfig+0x118>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004668:	4419      	add	r1, r3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <UART_SetConfig+0x118>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	@ 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	@ 0x32
 8004694:	4a07      	ldr	r2, [pc, #28]	@ (80046b4 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	440a      	add	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013800 	.word	0x40013800
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a06      	ldr	r2, [pc, #24]	@ (80046e0 <vApplicationGetIdleTaskMemory+0x28>)
 80046c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4a05      	ldr	r2, [pc, #20]	@ (80046e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80046ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2280      	movs	r2, #128	@ 0x80
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	20000698 	.word	0x20000698
 80046e4:	20000740 	.word	0x20000740

080046e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a07      	ldr	r2, [pc, #28]	@ (8004714 <vApplicationGetTimerTaskMemory+0x2c>)
 80046f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a06      	ldr	r2, [pc, #24]	@ (8004718 <vApplicationGetTimerTaskMemory+0x30>)
 80046fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000940 	.word	0x20000940
 8004718:	200009e8 	.word	0x200009e8

0800471c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f103 0208 	add.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f103 0208 	add.w	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 0208 	add.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d103      	bne.n	80047d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e00c      	b.n	80047f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3308      	adds	r3, #8
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e002      	b.n	80047e6 <vListInsert+0x2e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d2f6      	bcs.n	80047e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6892      	ldr	r2, [r2, #8]
 800483e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6852      	ldr	r2, [r2, #4]
 8004848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d103      	bne.n	800485c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1e5a      	subs	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr
	...

0800487c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048a8:	f002 f9d8 	bl	8006c5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d8:	3b01      	subs	r3, #1
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	441a      	add	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22ff      	movs	r2, #255	@ 0xff
 80048ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	22ff      	movs	r2, #255	@ 0xff
 80048f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d114      	bne.n	8004928 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01a      	beq.n	800493c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3310      	adds	r3, #16
 800490a:	4618      	mov	r0, r3
 800490c:	f001 faec 	bl	8005ee8 <xTaskRemoveFromEventList>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d012      	beq.n	800493c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <xQueueGenericReset+0xd0>)
 8004918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	e009      	b.n	800493c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3310      	adds	r3, #16
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fef5 	bl	800471c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3324      	adds	r3, #36	@ 0x24
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fef0 	bl	800471c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800493c:	f002 f9be 	bl	8006cbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004940:	2301      	movs	r3, #1
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	e000ed04 	.word	0xe000ed04

08004950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08e      	sub	sp, #56	@ 0x38
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <xQueueGenericCreateStatic+0x56>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <xQueueGenericCreateStatic+0x5a>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueGenericCreateStatic+0x5c>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <xQueueGenericCreateStatic+0x84>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <xQueueGenericCreateStatic+0x88>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <xQueueGenericCreateStatic+0x8a>
 80049d8:	2300      	movs	r3, #0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	61fb      	str	r3, [r7, #28]
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	e7fd      	b.n	80049f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049f6:	2350      	movs	r3, #80	@ 0x50
 80049f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b50      	cmp	r3, #80	@ 0x50
 80049fe:	d00b      	beq.n	8004a18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	61bb      	str	r3, [r7, #24]
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a2a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f805 	bl	8004a48 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3730      	adds	r7, #48	@ 0x30
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e002      	b.n	8004a6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a76:	2101      	movs	r1, #1
 8004a78:	69b8      	ldr	r0, [r7, #24]
 8004a7a:	f7ff feff 	bl	800487c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08e      	sub	sp, #56	@ 0x38
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <xQueueGenericSend+0x34>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <xQueueGenericSend+0x42>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <xQueueGenericSend+0x46>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xQueueGenericSend+0x48>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <xQueueGenericSend+0x64>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x72>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <xQueueGenericSend+0x76>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericSend+0x78>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xQueueGenericSend+0x94>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	623b      	str	r3, [r7, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b24:	f001 fbaa 	bl	800627c <xTaskGetSchedulerState>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <xQueueGenericSend+0xa4>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueGenericSend+0xa8>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <xQueueGenericSend+0xaa>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b56:	f002 f881 	bl	8006c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <xQueueGenericSend+0xdc>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d129      	bne.n	8004bc0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b72:	f000 fa0d 	bl	8004f90 <prvCopyDataToQueue>
 8004b76:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d010      	beq.n	8004ba2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	3324      	adds	r3, #36	@ 0x24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f9af 	bl	8005ee8 <xTaskRemoveFromEventList>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d013      	beq.n	8004bb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b90:	4b3f      	ldr	r3, [pc, #252]	@ (8004c90 <xQueueGenericSend+0x200>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	e00a      	b.n	8004bb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ba8:	4b39      	ldr	r3, [pc, #228]	@ (8004c90 <xQueueGenericSend+0x200>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bb8:	f002 f880 	bl	8006cbc <vPortExitCritical>
				return pdPASS;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e063      	b.n	8004c88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bc6:	f002 f879 	bl	8006cbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e05c      	b.n	8004c88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 f9e9 	bl	8005fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004be2:	f002 f86b 	bl	8006cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be6:	f000 ff4f 	bl	8005a88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bea:	f002 f837 	bl	8006c5c <vPortEnterCritical>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d103      	bne.n	8004c04 <xQueueGenericSend+0x174>
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c0a:	b25b      	sxtb	r3, r3
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSend+0x18a>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c1a:	f002 f84f 	bl	8006cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c1e:	1d3a      	adds	r2, r7, #4
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f9d8 	bl	8005fdc <xTaskCheckForTimeOut>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d124      	bne.n	8004c7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c34:	f000 faa4 	bl	8005180 <prvIsQueueFull>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	3310      	adds	r3, #16
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 f8fc 	bl	8005e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c4e:	f000 fa2f 	bl	80050b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c52:	f000 ff27 	bl	8005aa4 <xTaskResumeAll>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f47f af7c 	bne.w	8004b56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <xQueueGenericSend+0x200>)
 8004c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	e772      	b.n	8004b56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c72:	f000 fa1d 	bl	80050b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c76:	f000 ff15 	bl	8005aa4 <xTaskResumeAll>
 8004c7a:	e76c      	b.n	8004b56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c7e:	f000 fa17 	bl	80050b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c82:	f000 ff0f 	bl	8005aa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c86:	2300      	movs	r3, #0
		}
	}
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3738      	adds	r7, #56	@ 0x38
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	@ 0x38
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSendFromISR+0x3e>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericSendFromISR+0x42>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericSendFromISR+0x44>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	623b      	str	r3, [r7, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSendFromISR+0x6e>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <xQueueGenericSendFromISR+0x72>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericSendFromISR+0x74>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	61fb      	str	r3, [r7, #28]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d24:	f002 f85c 	bl	8006de0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d28:	f3ef 8211 	mrs	r2, BASEPRI
 8004d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	61ba      	str	r2, [r7, #24]
 8004d3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <xQueueGenericSendFromISR+0xc2>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d12c      	bne.n	8004db0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d66:	f000 f913 	bl	8004f90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d112      	bne.n	8004d9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d016      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	3324      	adds	r3, #36	@ 0x24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 f8b1 	bl	8005ee8 <xTaskRemoveFromEventList>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00e      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e007      	b.n	8004daa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	b25a      	sxtb	r2, r3
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004daa:	2301      	movs	r3, #1
 8004dac:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004dae:	e001      	b.n	8004db4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3738      	adds	r7, #56	@ 0x38
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	@ 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <xQueueReceive+0x32>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	623b      	str	r3, [r7, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	e7fd      	b.n	8004dfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <xQueueReceive+0x40>
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <xQueueReceive+0x44>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <xQueueReceive+0x46>
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <xQueueReceive+0x62>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	61fb      	str	r3, [r7, #28]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e2e:	f001 fa25 	bl	800627c <xTaskGetSchedulerState>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <xQueueReceive+0x72>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <xQueueReceive+0x76>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <xQueueReceive+0x78>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <xQueueReceive+0x94>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	61bb      	str	r3, [r7, #24]
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	e7fd      	b.n	8004e5c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e60:	f001 fefc 	bl	8006c5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01f      	beq.n	8004eb0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e74:	f000 f8f6 	bl	8005064 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	1e5a      	subs	r2, r3, #1
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00f      	beq.n	8004ea8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	3310      	adds	r3, #16
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 f82b 	bl	8005ee8 <xTaskRemoveFromEventList>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e98:	4b3c      	ldr	r3, [pc, #240]	@ (8004f8c <xQueueReceive+0x1c0>)
 8004e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ea8:	f001 ff08 	bl	8006cbc <vPortExitCritical>
				return pdPASS;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e069      	b.n	8004f84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eb6:	f001 ff01 	bl	8006cbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e062      	b.n	8004f84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f871 	bl	8005fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ed2:	f001 fef3 	bl	8006cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ed6:	f000 fdd7 	bl	8005a88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eda:	f001 febf 	bl	8006c5c <vPortEnterCritical>
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ee4:	b25b      	sxtb	r3, r3
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	d103      	bne.n	8004ef4 <xQueueReceive+0x128>
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004efa:	b25b      	sxtb	r3, r3
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d103      	bne.n	8004f0a <xQueueReceive+0x13e>
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f0a:	f001 fed7 	bl	8006cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f0e:	1d3a      	adds	r2, r7, #4
 8004f10:	f107 0310 	add.w	r3, r7, #16
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 f860 	bl	8005fdc <xTaskCheckForTimeOut>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d123      	bne.n	8004f6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f24:	f000 f916 	bl	8005154 <prvIsQueueEmpty>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d017      	beq.n	8004f5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	3324      	adds	r3, #36	@ 0x24
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 ff84 	bl	8005e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f3e:	f000 f8b7 	bl	80050b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f42:	f000 fdaf 	bl	8005aa4 <xTaskResumeAll>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d189      	bne.n	8004e60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <xQueueReceive+0x1c0>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	e780      	b.n	8004e60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f60:	f000 f8a6 	bl	80050b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f64:	f000 fd9e 	bl	8005aa4 <xTaskResumeAll>
 8004f68:	e77a      	b.n	8004e60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6c:	f000 f8a0 	bl	80050b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f70:	f000 fd98 	bl	8005aa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f76:	f000 f8ed 	bl	8005154 <prvIsQueueEmpty>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f43f af6f 	beq.w	8004e60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3730      	adds	r7, #48	@ 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d14d      	bne.n	8005052 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f97c 	bl	80062b8 <xTaskPriorityDisinherit>
 8004fc0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	e043      	b.n	8005052 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d119      	bne.n	8005004 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6898      	ldr	r0, [r3, #8]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	f002 f9a2 	bl	8007324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d32b      	bcc.n	8005052 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	609a      	str	r2, [r3, #8]
 8005002:	e026      	b.n	8005052 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68d8      	ldr	r0, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	f002 f988 	bl	8007324 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	425b      	negs	r3, r3
 800501e:	441a      	add	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d207      	bcs.n	8005040 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	425b      	negs	r3, r3
 800503a:	441a      	add	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d105      	bne.n	8005052 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	3b01      	subs	r3, #1
 8005050:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d018      	beq.n	80050a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	441a      	add	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d303      	bcc.n	8005098 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68d9      	ldr	r1, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a0:	461a      	mov	r2, r3
 80050a2:	6838      	ldr	r0, [r7, #0]
 80050a4:	f002 f93e 	bl	8007324 <memcpy>
	}
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050b8:	f001 fdd0 	bl	8006c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c4:	e011      	b.n	80050ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d012      	beq.n	80050f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3324      	adds	r3, #36	@ 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 ff08 	bl	8005ee8 <xTaskRemoveFromEventList>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050de:	f000 ffe1 	bl	80060a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dce9      	bgt.n	80050c6 <prvUnlockQueue+0x16>
 80050f2:	e000      	b.n	80050f6 <prvUnlockQueue+0x46>
					break;
 80050f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	22ff      	movs	r2, #255	@ 0xff
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050fe:	f001 fddd 	bl	8006cbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005102:	f001 fdab 	bl	8006c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800510c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800510e:	e011      	b.n	8005134 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d012      	beq.n	800513e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3310      	adds	r3, #16
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fee3 	bl	8005ee8 <xTaskRemoveFromEventList>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005128:	f000 ffbc 	bl	80060a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	3b01      	subs	r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005138:	2b00      	cmp	r3, #0
 800513a:	dce9      	bgt.n	8005110 <prvUnlockQueue+0x60>
 800513c:	e000      	b.n	8005140 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800513e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	22ff      	movs	r2, #255	@ 0xff
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005148:	f001 fdb8 	bl	8006cbc <vPortExitCritical>
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800515c:	f001 fd7e 	bl	8006c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e001      	b.n	8005172 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005172:	f001 fda3 	bl	8006cbc <vPortExitCritical>

	return xReturn;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005188:	f001 fd68 	bl	8006c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005194:	429a      	cmp	r2, r3
 8005196:	d102      	bne.n	800519e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005198:	2301      	movs	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e001      	b.n	80051a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a2:	f001 fd8b 	bl	8006cbc <vPortExitCritical>

	return xReturn;
 80051a6:	68fb      	ldr	r3, [r7, #12]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e014      	b.n	80051ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051c0:	4a0e      	ldr	r2, [pc, #56]	@ (80051fc <vQueueAddToRegistry+0x4c>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051cc:	490b      	ldr	r1, [pc, #44]	@ (80051fc <vQueueAddToRegistry+0x4c>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051d6:	4a09      	ldr	r2, [pc, #36]	@ (80051fc <vQueueAddToRegistry+0x4c>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051e2:	e006      	b.n	80051f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b07      	cmp	r3, #7
 80051ee:	d9e7      	bls.n	80051c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	20000de8 	.word	0x20000de8

08005200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005210:	f001 fd24 	bl	8006c5c <vPortEnterCritical>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800521a:	b25b      	sxtb	r3, r3
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d103      	bne.n	800522a <vQueueWaitForMessageRestricted+0x2a>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005230:	b25b      	sxtb	r3, r3
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d103      	bne.n	8005240 <vQueueWaitForMessageRestricted+0x40>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005240:	f001 fd3c 	bl	8006cbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3324      	adds	r3, #36	@ 0x24
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fe1b 	bl	8005e90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800525a:	6978      	ldr	r0, [r7, #20]
 800525c:	f7ff ff28 	bl	80050b0 <prvUnlockQueue>
	}
 8005260:	bf00      	nop
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08e      	sub	sp, #56	@ 0x38
 800526c:	af04      	add	r7, sp, #16
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <xTaskCreateStatic+0x2c>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	623b      	str	r3, [r7, #32]
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	61fb      	str	r3, [r7, #28]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052b2:	23a8      	movs	r3, #168	@ 0xa8
 80052b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80052ba:	d00b      	beq.n	80052d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	61bb      	str	r3, [r7, #24]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01e      	beq.n	8005318 <xTaskCreateStatic+0xb0>
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052e8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052f2:	2300      	movs	r3, #0
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	9302      	str	r3, [sp, #8]
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f850 	bl	80053b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005312:	f000 f8ed 	bl	80054f0 <prvAddNewTaskToReadyList>
 8005316:	e001      	b.n	800531c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800531c:	697b      	ldr	r3, [r7, #20]
	}
 800531e:	4618      	mov	r0, r3
 8005320:	3728      	adds	r7, #40	@ 0x28
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005326:	b580      	push	{r7, lr}
 8005328:	b08c      	sub	sp, #48	@ 0x30
 800532a:	af04      	add	r7, sp, #16
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4618      	mov	r0, r3
 800533c:	f001 fd90 	bl	8006e60 <pvPortMalloc>
 8005340:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005348:	20a8      	movs	r0, #168	@ 0xa8
 800534a:	f001 fd89 	bl	8006e60 <pvPortMalloc>
 800534e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
 800535c:	e005      	b.n	800536a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f001 fe46 	bl	8006ff0 <vPortFree>
 8005364:	e001      	b.n	800536a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d017      	beq.n	80053a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	2300      	movs	r3, #0
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f80e 	bl	80053b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005394:	69f8      	ldr	r0, [r7, #28]
 8005396:	f000 f8ab 	bl	80054f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800539a:	2301      	movs	r3, #1
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e002      	b.n	80053a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053a6:	69bb      	ldr	r3, [r7, #24]
	}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	461a      	mov	r2, r3
 80053c8:	21a5      	movs	r1, #165	@ 0xa5
 80053ca:	f001 ff27 	bl	800721c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053d8:	3b01      	subs	r3, #1
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f023 0307 	bic.w	r3, r3, #7
 80053e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	617b      	str	r3, [r7, #20]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	e012      	b.n	8005436 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	7819      	ldrb	r1, [r3, #0]
 8005418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	3334      	adds	r3, #52	@ 0x34
 8005420:	460a      	mov	r2, r1
 8005422:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	3301      	adds	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2b0f      	cmp	r3, #15
 800543a:	d9e9      	bls.n	8005410 <prvInitialiseNewTask+0x60>
 800543c:	e000      	b.n	8005440 <prvInitialiseNewTask+0x90>
		{
			break;
 800543e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	2b37      	cmp	r3, #55	@ 0x37
 800544c:	d901      	bls.n	8005452 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800544e:	2337      	movs	r3, #55	@ 0x37
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005456:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800545c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff f976 	bl	800475a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	3318      	adds	r3, #24
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f971 	bl	800475a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800547c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	2200      	movs	r2, #0
 8005492:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2200      	movs	r2, #0
 800549a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	3354      	adds	r3, #84	@ 0x54
 80054a2:	224c      	movs	r2, #76	@ 0x4c
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 feb8 	bl	800721c <memset>
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	4a0d      	ldr	r2, [pc, #52]	@ (80054e4 <prvInitialiseNewTask+0x134>)
 80054b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	4a0c      	ldr	r2, [pc, #48]	@ (80054e8 <prvInitialiseNewTask+0x138>)
 80054b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	4a0c      	ldr	r2, [pc, #48]	@ (80054ec <prvInitialiseNewTask+0x13c>)
 80054bc:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	69b8      	ldr	r0, [r7, #24]
 80054c4:	f001 fadc 	bl	8006a80 <pxPortInitialiseStack>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80054ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054da:	bf00      	nop
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20002074 	.word	0x20002074
 80054e8:	200020dc 	.word	0x200020dc
 80054ec:	20002144 	.word	0x20002144

080054f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f8:	f001 fbb0 	bl	8006c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054fc:	4b2d      	ldr	r3, [pc, #180]	@ (80055b4 <prvAddNewTaskToReadyList+0xc4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	4a2c      	ldr	r2, [pc, #176]	@ (80055b4 <prvAddNewTaskToReadyList+0xc4>)
 8005504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005506:	4b2c      	ldr	r3, [pc, #176]	@ (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800550e:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005514:	4b27      	ldr	r3, [pc, #156]	@ (80055b4 <prvAddNewTaskToReadyList+0xc4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d110      	bne.n	800553e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800551c:	f000 fde6 	bl	80060ec <prvInitialiseTaskLists>
 8005520:	e00d      	b.n	800553e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <prvAddNewTaskToReadyList+0xcc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800552a:	4b23      	ldr	r3, [pc, #140]	@ (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	429a      	cmp	r2, r3
 8005536:	d802      	bhi.n	800553e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005538:	4a1f      	ldr	r2, [pc, #124]	@ (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800553e:	4b20      	ldr	r3, [pc, #128]	@ (80055c0 <prvAddNewTaskToReadyList+0xd0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	4a1e      	ldr	r2, [pc, #120]	@ (80055c0 <prvAddNewTaskToReadyList+0xd0>)
 8005546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005548:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <prvAddNewTaskToReadyList+0xd0>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005554:	4b1b      	ldr	r3, [pc, #108]	@ (80055c4 <prvAddNewTaskToReadyList+0xd4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d903      	bls.n	8005564 <prvAddNewTaskToReadyList+0x74>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a18      	ldr	r2, [pc, #96]	@ (80055c4 <prvAddNewTaskToReadyList+0xd4>)
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4a15      	ldr	r2, [pc, #84]	@ (80055c8 <prvAddNewTaskToReadyList+0xd8>)
 8005572:	441a      	add	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f7ff f8f9 	bl	8004772 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005580:	f001 fb9c 	bl	8006cbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005584:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <prvAddNewTaskToReadyList+0xcc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	429a      	cmp	r2, r3
 8005598:	d207      	bcs.n	80055aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <prvAddNewTaskToReadyList+0xdc>)
 800559c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	200012fc 	.word	0x200012fc
 80055b8:	20000e28 	.word	0x20000e28
 80055bc:	20001308 	.word	0x20001308
 80055c0:	20001318 	.word	0x20001318
 80055c4:	20001304 	.word	0x20001304
 80055c8:	20000e2c 	.word	0x20000e2c
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d018      	beq.n	8005614 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055e2:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <vTaskDelay+0x64>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <vTaskDelay+0x32>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60bb      	str	r3, [r7, #8]
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	e7fd      	b.n	80055fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005602:	f000 fa41 	bl	8005a88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005606:	2100      	movs	r1, #0
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fec5 	bl	8006398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800560e:	f000 fa49 	bl	8005aa4 <xTaskResumeAll>
 8005612:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d107      	bne.n	800562a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800561a:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <vTaskDelay+0x68>)
 800561c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20001324 	.word	0x20001324
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b37      	cmp	r3, #55	@ 0x37
 800564e:	d90b      	bls.n	8005668 <vTaskPrioritySet+0x2c>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	60fb      	str	r3, [r7, #12]
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b37      	cmp	r3, #55	@ 0x37
 800566c:	d901      	bls.n	8005672 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800566e:	2337      	movs	r3, #55	@ 0x37
 8005670:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005672:	f001 faf3 	bl	8006c5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <vTaskPrioritySet+0x46>
 800567c:	4b3d      	ldr	r3, [pc, #244]	@ (8005774 <vTaskPrioritySet+0x138>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	e000      	b.n	8005684 <vTaskPrioritySet+0x48>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d068      	beq.n	8005766 <vTaskPrioritySet+0x12a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	429a      	cmp	r2, r3
 800569a:	d90d      	bls.n	80056b8 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800569c:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <vTaskPrioritySet+0x138>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d00f      	beq.n	80056c6 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80056a6:	4b33      	ldr	r3, [pc, #204]	@ (8005774 <vTaskPrioritySet+0x138>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d309      	bcc.n	80056c6 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	e006      	b.n	80056c6 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80056b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005774 <vTaskPrioritySet+0x138>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d101      	bne.n	80056c6 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d102      	bne.n	80056de <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	db04      	blt.n	80056f6 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	6959      	ldr	r1, [r3, #20]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <vTaskPrioritySet+0x13c>)
 8005706:	4413      	add	r3, r2
 8005708:	4299      	cmp	r1, r3
 800570a:	d101      	bne.n	8005710 <vTaskPrioritySet+0xd4>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <vTaskPrioritySet+0xd6>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01c      	beq.n	8005750 <vTaskPrioritySet+0x114>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff f884 	bl	8004828 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005724:	4b15      	ldr	r3, [pc, #84]	@ (800577c <vTaskPrioritySet+0x140>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d903      	bls.n	8005734 <vTaskPrioritySet+0xf8>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005730:	4a12      	ldr	r2, [pc, #72]	@ (800577c <vTaskPrioritySet+0x140>)
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4a0d      	ldr	r2, [pc, #52]	@ (8005778 <vTaskPrioritySet+0x13c>)
 8005742:	441a      	add	r2, r3
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f7ff f811 	bl	8004772 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <vTaskPrioritySet+0x12a>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005756:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <vTaskPrioritySet+0x144>)
 8005758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005766:	f001 faa9 	bl	8006cbc <vPortExitCritical>
	}
 800576a:	bf00      	nop
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000e28 	.word	0x20000e28
 8005778:	20000e2c 	.word	0x20000e2c
 800577c:	20001304 	.word	0x20001304
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800578c:	f001 fa66 	bl	8006c5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <vTaskSuspend+0x18>
 8005796:	4b30      	ldr	r3, [pc, #192]	@ (8005858 <vTaskSuspend+0xd4>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	e000      	b.n	800579e <vTaskSuspend+0x1a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff f83f 	bl	8004828 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3318      	adds	r3, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff f836 	bl	8004828 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4826      	ldr	r0, [pc, #152]	@ (800585c <vTaskSuspend+0xd8>)
 80057c4:	f7fe ffd5 	bl	8004772 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d103      	bne.n	80057dc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80057dc:	f001 fa6e 	bl	8006cbc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80057e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005860 <vTaskSuspend+0xdc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80057e8:	f001 fa38 	bl	8006c5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80057ec:	f000 fd22 	bl	8006234 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80057f0:	f001 fa64 	bl	8006cbc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80057f4:	4b18      	ldr	r3, [pc, #96]	@ (8005858 <vTaskSuspend+0xd4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d128      	bne.n	8005850 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 80057fe:	4b18      	ldr	r3, [pc, #96]	@ (8005860 <vTaskSuspend+0xdc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005806:	4b17      	ldr	r3, [pc, #92]	@ (8005864 <vTaskSuspend+0xe0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <vTaskSuspend+0xa2>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60bb      	str	r3, [r7, #8]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005826:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <vTaskSuspend+0xe4>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005836:	e00b      	b.n	8005850 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005838:	4b08      	ldr	r3, [pc, #32]	@ (800585c <vTaskSuspend+0xd8>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <vTaskSuspend+0xe8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d103      	bne.n	800584c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8005844:	4b04      	ldr	r3, [pc, #16]	@ (8005858 <vTaskSuspend+0xd4>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
	}
 800584a:	e001      	b.n	8005850 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800584c:	f000 fa96 	bl	8005d7c <vTaskSwitchContext>
	}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000e28 	.word	0x20000e28
 800585c:	200012e8 	.word	0x200012e8
 8005860:	20001308 	.word	0x20001308
 8005864:	20001324 	.word	0x20001324
 8005868:	e000ed04 	.word	0xe000ed04
 800586c:	200012fc 	.word	0x200012fc

08005870 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4a0f      	ldr	r2, [pc, #60]	@ (80058e0 <prvTaskIsTaskSuspended+0x70>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <prvTaskIsTaskSuspended+0x3c>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <prvTaskIsTaskSuspended+0x3e>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00f      	beq.n	80058d2 <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b6:	4a0b      	ldr	r2, [pc, #44]	@ (80058e4 <prvTaskIsTaskSuspended+0x74>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00a      	beq.n	80058d2 <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <prvTaskIsTaskSuspended+0x58>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <prvTaskIsTaskSuspended+0x5a>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 80058ce:	2301      	movs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058d2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80058d4:	4618      	mov	r0, r3
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	200012e8 	.word	0x200012e8
 80058e4:	200012bc 	.word	0x200012bc

080058e8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <vTaskResume+0x2a>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	60bb      	str	r3, [r7, #8]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d03a      	beq.n	800598e <vTaskResume+0xa6>
 8005918:	4b1f      	ldr	r3, [pc, #124]	@ (8005998 <vTaskResume+0xb0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d035      	beq.n	800598e <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8005922:	f001 f99b 	bl	8006c5c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ffa2 	bl	8005870 <prvTaskIsTaskSuspended>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d02b      	beq.n	800598a <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe ff76 	bl	8004828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005940:	4b16      	ldr	r3, [pc, #88]	@ (800599c <vTaskResume+0xb4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d903      	bls.n	8005950 <vTaskResume+0x68>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	4a13      	ldr	r2, [pc, #76]	@ (800599c <vTaskResume+0xb4>)
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a10      	ldr	r2, [pc, #64]	@ (80059a0 <vTaskResume+0xb8>)
 800595e:	441a      	add	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe ff03 	bl	8004772 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005970:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <vTaskResume+0xb0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d307      	bcc.n	800598a <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800597a:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <vTaskResume+0xbc>)
 800597c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800598a:	f001 f997 	bl	8006cbc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000e28 	.word	0x20000e28
 800599c:	20001304 	.word	0x20001304
 80059a0:	20000e2c 	.word	0x20000e2c
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	@ 0x28
 80059ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059b6:	463a      	mov	r2, r7
 80059b8:	1d39      	adds	r1, r7, #4
 80059ba:	f107 0308 	add.w	r3, r7, #8
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fe7a 	bl	80046b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	9202      	str	r2, [sp, #8]
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	2300      	movs	r3, #0
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	460a      	mov	r2, r1
 80059d6:	4924      	ldr	r1, [pc, #144]	@ (8005a68 <vTaskStartScheduler+0xc0>)
 80059d8:	4824      	ldr	r0, [pc, #144]	@ (8005a6c <vTaskStartScheduler+0xc4>)
 80059da:	f7ff fc45 	bl	8005268 <xTaskCreateStatic>
 80059de:	4603      	mov	r3, r0
 80059e0:	4a23      	ldr	r2, [pc, #140]	@ (8005a70 <vTaskStartScheduler+0xc8>)
 80059e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059e4:	4b22      	ldr	r3, [pc, #136]	@ (8005a70 <vTaskStartScheduler+0xc8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059ec:	2301      	movs	r3, #1
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	e001      	b.n	80059f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d102      	bne.n	8005a02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059fc:	f000 fd20 	bl	8006440 <xTimerCreateTimerTask>
 8005a00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d11b      	bne.n	8005a40 <vTaskStartScheduler+0x98>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	613b      	str	r3, [r7, #16]
}
 8005a1a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a1c:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <vTaskStartScheduler+0xcc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3354      	adds	r3, #84	@ 0x54
 8005a22:	4a15      	ldr	r2, [pc, #84]	@ (8005a78 <vTaskStartScheduler+0xd0>)
 8005a24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a26:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <vTaskStartScheduler+0xd4>)
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a2e:	4b14      	ldr	r3, [pc, #80]	@ (8005a80 <vTaskStartScheduler+0xd8>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a34:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <vTaskStartScheduler+0xdc>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a3a:	f001 f89d 	bl	8006b78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a3e:	e00f      	b.n	8005a60 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d10b      	bne.n	8005a60 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	60fb      	str	r3, [r7, #12]
}
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <vTaskStartScheduler+0xb4>
}
 8005a60:	bf00      	nop
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	080074b8 	.word	0x080074b8
 8005a6c:	080060bd 	.word	0x080060bd
 8005a70:	20001320 	.word	0x20001320
 8005a74:	20000e28 	.word	0x20000e28
 8005a78:	20000024 	.word	0x20000024
 8005a7c:	2000131c 	.word	0x2000131c
 8005a80:	20001308 	.word	0x20001308
 8005a84:	20001300 	.word	0x20001300

08005a88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <vTaskSuspendAll+0x18>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3301      	adds	r3, #1
 8005a92:	4a03      	ldr	r2, [pc, #12]	@ (8005aa0 <vTaskSuspendAll+0x18>)
 8005a94:	6013      	str	r3, [r2, #0]
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20001324 	.word	0x20001324

08005aa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ab2:	4b42      	ldr	r3, [pc, #264]	@ (8005bbc <xTaskResumeAll+0x118>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <xTaskResumeAll+0x2e>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	603b      	str	r3, [r7, #0]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ad2:	f001 f8c3 	bl	8006c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ad6:	4b39      	ldr	r3, [pc, #228]	@ (8005bbc <xTaskResumeAll+0x118>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	4a37      	ldr	r2, [pc, #220]	@ (8005bbc <xTaskResumeAll+0x118>)
 8005ade:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae0:	4b36      	ldr	r3, [pc, #216]	@ (8005bbc <xTaskResumeAll+0x118>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d162      	bne.n	8005bae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ae8:	4b35      	ldr	r3, [pc, #212]	@ (8005bc0 <xTaskResumeAll+0x11c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05e      	beq.n	8005bae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005af0:	e02f      	b.n	8005b52 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005af2:	4b34      	ldr	r3, [pc, #208]	@ (8005bc4 <xTaskResumeAll+0x120>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3318      	adds	r3, #24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fe92 	bl	8004828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fe8d 	bl	8004828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b12:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc8 <xTaskResumeAll+0x124>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d903      	bls.n	8005b22 <xTaskResumeAll+0x7e>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc8 <xTaskResumeAll+0x124>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a27      	ldr	r2, [pc, #156]	@ (8005bcc <xTaskResumeAll+0x128>)
 8005b30:	441a      	add	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f7fe fe1a 	bl	8004772 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <xTaskResumeAll+0x12c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d302      	bcc.n	8005b52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b4c:	4b21      	ldr	r3, [pc, #132]	@ (8005bd4 <xTaskResumeAll+0x130>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b52:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc4 <xTaskResumeAll+0x120>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1cb      	bne.n	8005af2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b60:	f000 fb68 	bl	8006234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b64:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd8 <xTaskResumeAll+0x134>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d010      	beq.n	8005b92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b70:	f000 f844 	bl	8005bfc <xTaskIncrementTick>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005b7a:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <xTaskResumeAll+0x130>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f1      	bne.n	8005b70 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005b8c:	4b12      	ldr	r3, [pc, #72]	@ (8005bd8 <xTaskResumeAll+0x134>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b92:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <xTaskResumeAll+0x130>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <xTaskResumeAll+0x138>)
 8005ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bae:	f001 f885 	bl	8006cbc <vPortExitCritical>

	return xAlreadyYielded;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20001324 	.word	0x20001324
 8005bc0:	200012fc 	.word	0x200012fc
 8005bc4:	200012bc 	.word	0x200012bc
 8005bc8:	20001304 	.word	0x20001304
 8005bcc:	20000e2c 	.word	0x20000e2c
 8005bd0:	20000e28 	.word	0x20000e28
 8005bd4:	20001310 	.word	0x20001310
 8005bd8:	2000130c 	.word	0x2000130c
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005be6:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <xTaskGetTickCount+0x18>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bec:	687b      	ldr	r3, [r7, #4]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	20001300 	.word	0x20001300

08005bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c06:	4b52      	ldr	r3, [pc, #328]	@ (8005d50 <xTaskIncrementTick+0x154>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f040 808f 	bne.w	8005d2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c10:	4b50      	ldr	r3, [pc, #320]	@ (8005d54 <xTaskIncrementTick+0x158>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c18:	4a4e      	ldr	r2, [pc, #312]	@ (8005d54 <xTaskIncrementTick+0x158>)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d121      	bne.n	8005c68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c24:	4b4c      	ldr	r3, [pc, #304]	@ (8005d58 <xTaskIncrementTick+0x15c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	603b      	str	r3, [r7, #0]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <xTaskIncrementTick+0x46>
 8005c46:	4b44      	ldr	r3, [pc, #272]	@ (8005d58 <xTaskIncrementTick+0x15c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	4b43      	ldr	r3, [pc, #268]	@ (8005d5c <xTaskIncrementTick+0x160>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a41      	ldr	r2, [pc, #260]	@ (8005d58 <xTaskIncrementTick+0x15c>)
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	4a41      	ldr	r2, [pc, #260]	@ (8005d5c <xTaskIncrementTick+0x160>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	4b41      	ldr	r3, [pc, #260]	@ (8005d60 <xTaskIncrementTick+0x164>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	4a3f      	ldr	r2, [pc, #252]	@ (8005d60 <xTaskIncrementTick+0x164>)
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	f000 fae6 	bl	8006234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c68:	4b3e      	ldr	r3, [pc, #248]	@ (8005d64 <xTaskIncrementTick+0x168>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d34e      	bcc.n	8005d10 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c72:	4b39      	ldr	r3, [pc, #228]	@ (8005d58 <xTaskIncrementTick+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <xTaskIncrementTick+0x84>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <xTaskIncrementTick+0x86>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c86:	4b37      	ldr	r3, [pc, #220]	@ (8005d64 <xTaskIncrementTick+0x168>)
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	601a      	str	r2, [r3, #0]
					break;
 8005c8e:	e03f      	b.n	8005d10 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c90:	4b31      	ldr	r3, [pc, #196]	@ (8005d58 <xTaskIncrementTick+0x15c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d203      	bcs.n	8005cb0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8005d64 <xTaskIncrementTick+0x168>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6013      	str	r3, [r2, #0]
						break;
 8005cae:	e02f      	b.n	8005d10 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fdb7 	bl	8004828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fdae 	bl	8004828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd0:	4b25      	ldr	r3, [pc, #148]	@ (8005d68 <xTaskIncrementTick+0x16c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d903      	bls.n	8005ce0 <xTaskIncrementTick+0xe4>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	4a22      	ldr	r2, [pc, #136]	@ (8005d68 <xTaskIncrementTick+0x16c>)
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4a1f      	ldr	r2, [pc, #124]	@ (8005d6c <xTaskIncrementTick+0x170>)
 8005cee:	441a      	add	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f7fe fd3b 	bl	8004772 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d00:	4b1b      	ldr	r3, [pc, #108]	@ (8005d70 <xTaskIncrementTick+0x174>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d3b3      	bcc.n	8005c72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d0e:	e7b0      	b.n	8005c72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d10:	4b17      	ldr	r3, [pc, #92]	@ (8005d70 <xTaskIncrementTick+0x174>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d16:	4915      	ldr	r1, [pc, #84]	@ (8005d6c <xTaskIncrementTick+0x170>)
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d907      	bls.n	8005d38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e004      	b.n	8005d38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d2e:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <xTaskIncrementTick+0x178>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a0f      	ldr	r2, [pc, #60]	@ (8005d74 <xTaskIncrementTick+0x178>)
 8005d36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d38:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <xTaskIncrementTick+0x17c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d44:	697b      	ldr	r3, [r7, #20]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20001324 	.word	0x20001324
 8005d54:	20001300 	.word	0x20001300
 8005d58:	200012b4 	.word	0x200012b4
 8005d5c:	200012b8 	.word	0x200012b8
 8005d60:	20001314 	.word	0x20001314
 8005d64:	2000131c 	.word	0x2000131c
 8005d68:	20001304 	.word	0x20001304
 8005d6c:	20000e2c 	.word	0x20000e2c
 8005d70:	20000e28 	.word	0x20000e28
 8005d74:	2000130c 	.word	0x2000130c
 8005d78:	20001310 	.word	0x20001310

08005d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d82:	4b2a      	ldr	r3, [pc, #168]	@ (8005e2c <vTaskSwitchContext+0xb0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d8a:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <vTaskSwitchContext+0xb4>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d90:	e047      	b.n	8005e22 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005d92:	4b27      	ldr	r3, [pc, #156]	@ (8005e30 <vTaskSwitchContext+0xb4>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d98:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <vTaskSwitchContext+0xb8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e011      	b.n	8005dc4 <vTaskSwitchContext+0x48>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <vTaskSwitchContext+0x42>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	607b      	str	r3, [r7, #4]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <vTaskSwitchContext+0x3e>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	491c      	ldr	r1, [pc, #112]	@ (8005e38 <vTaskSwitchContext+0xbc>)
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0e3      	beq.n	8005da0 <vTaskSwitchContext+0x24>
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4a15      	ldr	r2, [pc, #84]	@ (8005e38 <vTaskSwitchContext+0xbc>)
 8005de4:	4413      	add	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d104      	bne.n	8005e08 <vTaskSwitchContext+0x8c>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8005e3c <vTaskSwitchContext+0xc0>)
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	4a08      	ldr	r2, [pc, #32]	@ (8005e34 <vTaskSwitchContext+0xb8>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e18:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <vTaskSwitchContext+0xc0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3354      	adds	r3, #84	@ 0x54
 8005e1e:	4a08      	ldr	r2, [pc, #32]	@ (8005e40 <vTaskSwitchContext+0xc4>)
 8005e20:	6013      	str	r3, [r2, #0]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	20001324 	.word	0x20001324
 8005e30:	20001310 	.word	0x20001310
 8005e34:	20001304 	.word	0x20001304
 8005e38:	20000e2c 	.word	0x20000e2c
 8005e3c:	20000e28 	.word	0x20000e28
 8005e40:	20000024 	.word	0x20000024

08005e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	60fb      	str	r3, [r7, #12]
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	e7fd      	b.n	8005e68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e6c:	4b07      	ldr	r3, [pc, #28]	@ (8005e8c <vTaskPlaceOnEventList+0x48>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3318      	adds	r3, #24
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fe fc9f 	bl	80047b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	6838      	ldr	r0, [r7, #0]
 8005e7e:	f000 fa8b 	bl	8006398 <prvAddCurrentTaskToDelayedList>
}
 8005e82:	bf00      	nop
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000e28 	.word	0x20000e28

08005e90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	617b      	str	r3, [r7, #20]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3318      	adds	r3, #24
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7fe fc55 	bl	8004772 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	68b8      	ldr	r0, [r7, #8]
 8005ed8:	f000 fa5e 	bl	8006398 <prvAddCurrentTaskToDelayedList>
	}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000e28 	.word	0x20000e28

08005ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	3318      	adds	r3, #24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fc84 	bl	8004828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f20:	4b1d      	ldr	r3, [pc, #116]	@ (8005f98 <xTaskRemoveFromEventList+0xb0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11d      	bne.n	8005f64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe fc7b 	bl	8004828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f36:	4b19      	ldr	r3, [pc, #100]	@ (8005f9c <xTaskRemoveFromEventList+0xb4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d903      	bls.n	8005f46 <xTaskRemoveFromEventList+0x5e>
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f42:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <xTaskRemoveFromEventList+0xb4>)
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4a13      	ldr	r2, [pc, #76]	@ (8005fa0 <xTaskRemoveFromEventList+0xb8>)
 8005f54:	441a      	add	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fe fc08 	bl	8004772 <vListInsertEnd>
 8005f62:	e005      	b.n	8005f70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	3318      	adds	r3, #24
 8005f68:	4619      	mov	r1, r3
 8005f6a:	480e      	ldr	r0, [pc, #56]	@ (8005fa4 <xTaskRemoveFromEventList+0xbc>)
 8005f6c:	f7fe fc01 	bl	8004772 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f74:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <xTaskRemoveFromEventList+0xc0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d905      	bls.n	8005f8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f82:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <xTaskRemoveFromEventList+0xc4>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e001      	b.n	8005f8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005f8e:	697b      	ldr	r3, [r7, #20]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20001324 	.word	0x20001324
 8005f9c:	20001304 	.word	0x20001304
 8005fa0:	20000e2c 	.word	0x20000e2c
 8005fa4:	200012bc 	.word	0x200012bc
 8005fa8:	20000e28 	.word	0x20000e28
 8005fac:	20001310 	.word	0x20001310

08005fb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fb8:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <vTaskInternalSetTimeOutState+0x24>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <vTaskInternalSetTimeOutState+0x28>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	605a      	str	r2, [r3, #4]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20001314 	.word	0x20001314
 8005fd8:	20001300 	.word	0x20001300

08005fdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10b      	bne.n	8006004 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	613b      	str	r3, [r7, #16]
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60fb      	str	r3, [r7, #12]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006022:	f000 fe1b 	bl	8006c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006026:	4b1d      	ldr	r3, [pc, #116]	@ (800609c <xTaskCheckForTimeOut+0xc0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d102      	bne.n	8006046 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	e023      	b.n	800608e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <xTaskCheckForTimeOut+0xc4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d007      	beq.n	8006062 <xTaskCheckForTimeOut+0x86>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	e015      	b.n	800608e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	429a      	cmp	r2, r3
 800606a:	d20b      	bcs.n	8006084 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad2      	subs	r2, r2, r3
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff ff99 	bl	8005fb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e004      	b.n	800608e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800608a:	2301      	movs	r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800608e:	f000 fe15 	bl	8006cbc <vPortExitCritical>

	return xReturn;
 8006092:	69fb      	ldr	r3, [r7, #28]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20001300 	.word	0x20001300
 80060a0:	20001314 	.word	0x20001314

080060a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060a8:	4b03      	ldr	r3, [pc, #12]	@ (80060b8 <vTaskMissedYield+0x14>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20001310 	.word	0x20001310

080060bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060c4:	f000 f852 	bl	800616c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060c8:	4b06      	ldr	r3, [pc, #24]	@ (80060e4 <prvIdleTask+0x28>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d9f9      	bls.n	80060c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060d0:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <prvIdleTask+0x2c>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060e0:	e7f0      	b.n	80060c4 <prvIdleTask+0x8>
 80060e2:	bf00      	nop
 80060e4:	20000e2c 	.word	0x20000e2c
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	e00c      	b.n	8006112 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a12      	ldr	r2, [pc, #72]	@ (800614c <prvInitialiseTaskLists+0x60>)
 8006104:	4413      	add	r3, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fb08 	bl	800471c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3301      	adds	r3, #1
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b37      	cmp	r3, #55	@ 0x37
 8006116:	d9ef      	bls.n	80060f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006118:	480d      	ldr	r0, [pc, #52]	@ (8006150 <prvInitialiseTaskLists+0x64>)
 800611a:	f7fe faff 	bl	800471c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800611e:	480d      	ldr	r0, [pc, #52]	@ (8006154 <prvInitialiseTaskLists+0x68>)
 8006120:	f7fe fafc 	bl	800471c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006124:	480c      	ldr	r0, [pc, #48]	@ (8006158 <prvInitialiseTaskLists+0x6c>)
 8006126:	f7fe faf9 	bl	800471c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800612a:	480c      	ldr	r0, [pc, #48]	@ (800615c <prvInitialiseTaskLists+0x70>)
 800612c:	f7fe faf6 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006130:	480b      	ldr	r0, [pc, #44]	@ (8006160 <prvInitialiseTaskLists+0x74>)
 8006132:	f7fe faf3 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006136:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <prvInitialiseTaskLists+0x78>)
 8006138:	4a05      	ldr	r2, [pc, #20]	@ (8006150 <prvInitialiseTaskLists+0x64>)
 800613a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800613c:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <prvInitialiseTaskLists+0x7c>)
 800613e:	4a05      	ldr	r2, [pc, #20]	@ (8006154 <prvInitialiseTaskLists+0x68>)
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000e2c 	.word	0x20000e2c
 8006150:	2000128c 	.word	0x2000128c
 8006154:	200012a0 	.word	0x200012a0
 8006158:	200012bc 	.word	0x200012bc
 800615c:	200012d0 	.word	0x200012d0
 8006160:	200012e8 	.word	0x200012e8
 8006164:	200012b4 	.word	0x200012b4
 8006168:	200012b8 	.word	0x200012b8

0800616c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006172:	e019      	b.n	80061a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006174:	f000 fd72 	bl	8006c5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006178:	4b10      	ldr	r3, [pc, #64]	@ (80061bc <prvCheckTasksWaitingTermination+0x50>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fb4f 	bl	8004828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800618a:	4b0d      	ldr	r3, [pc, #52]	@ (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3b01      	subs	r3, #1
 8006190:	4a0b      	ldr	r2, [pc, #44]	@ (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 8006192:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006194:	4b0b      	ldr	r3, [pc, #44]	@ (80061c4 <prvCheckTasksWaitingTermination+0x58>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3b01      	subs	r3, #1
 800619a:	4a0a      	ldr	r2, [pc, #40]	@ (80061c4 <prvCheckTasksWaitingTermination+0x58>)
 800619c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800619e:	f000 fd8d 	bl	8006cbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f810 	bl	80061c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a8:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <prvCheckTasksWaitingTermination+0x58>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e1      	bne.n	8006174 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	200012d0 	.word	0x200012d0
 80061c0:	200012fc 	.word	0x200012fc
 80061c4:	200012e4 	.word	0x200012e4

080061c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3354      	adds	r3, #84	@ 0x54
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 f829 	bl	800722c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d108      	bne.n	80061f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 ff01 	bl	8006ff0 <vPortFree>
				vPortFree( pxTCB );
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fefe 	bl	8006ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061f4:	e019      	b.n	800622a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d103      	bne.n	8006208 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fef5 	bl	8006ff0 <vPortFree>
	}
 8006206:	e010      	b.n	800622a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800620e:	2b02      	cmp	r3, #2
 8006210:	d00b      	beq.n	800622a <prvDeleteTCB+0x62>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	60fb      	str	r3, [r7, #12]
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	e7fd      	b.n	8006226 <prvDeleteTCB+0x5e>
	}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623a:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <prvResetNextTaskUnblockTime+0x40>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <prvResetNextTaskUnblockTime+0x14>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <prvResetNextTaskUnblockTime+0x16>
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800624e:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <prvResetNextTaskUnblockTime+0x44>)
 8006250:	f04f 32ff 	mov.w	r2, #4294967295
 8006254:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006256:	e008      	b.n	800626a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006258:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <prvResetNextTaskUnblockTime+0x40>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4a04      	ldr	r2, [pc, #16]	@ (8006278 <prvResetNextTaskUnblockTime+0x44>)
 8006268:	6013      	str	r3, [r2, #0]
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr
 8006274:	200012b4 	.word	0x200012b4
 8006278:	2000131c 	.word	0x2000131c

0800627c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006282:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <xTaskGetSchedulerState+0x34>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800628a:	2301      	movs	r3, #1
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	e008      	b.n	80062a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006290:	4b08      	ldr	r3, [pc, #32]	@ (80062b4 <xTaskGetSchedulerState+0x38>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006298:	2302      	movs	r3, #2
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	e001      	b.n	80062a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800629e:	2300      	movs	r3, #0
 80062a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062a2:	687b      	ldr	r3, [r7, #4]
	}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20001308 	.word	0x20001308
 80062b4:	20001324 	.word	0x20001324

080062b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d058      	beq.n	8006380 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062ce:	4b2f      	ldr	r3, [pc, #188]	@ (800638c <xTaskPriorityDisinherit+0xd4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d00b      	beq.n	80062f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	60fb      	str	r3, [r7, #12]
}
 80062ea:	bf00      	nop
 80062ec:	bf00      	nop
 80062ee:	e7fd      	b.n	80062ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	60bb      	str	r3, [r7, #8]
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006314:	1e5a      	subs	r2, r3, #1
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006322:	429a      	cmp	r2, r3
 8006324:	d02c      	beq.n	8006380 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632a:	2b00      	cmp	r3, #0
 800632c:	d128      	bne.n	8006380 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3304      	adds	r3, #4
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fa78 	bl	8004828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006350:	4b0f      	ldr	r3, [pc, #60]	@ (8006390 <xTaskPriorityDisinherit+0xd8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d903      	bls.n	8006360 <xTaskPriorityDisinherit+0xa8>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	4a0c      	ldr	r2, [pc, #48]	@ (8006390 <xTaskPriorityDisinherit+0xd8>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a09      	ldr	r2, [pc, #36]	@ (8006394 <xTaskPriorityDisinherit+0xdc>)
 800636e:	441a      	add	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fe f9fb 	bl	8004772 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006380:	697b      	ldr	r3, [r7, #20]
	}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000e28 	.word	0x20000e28
 8006390:	20001304 	.word	0x20001304
 8006394:	20000e2c 	.word	0x20000e2c

08006398 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063a2:	4b21      	ldr	r3, [pc, #132]	@ (8006428 <prvAddCurrentTaskToDelayedList+0x90>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063a8:	4b20      	ldr	r3, [pc, #128]	@ (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fa3a 	bl	8004828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d10a      	bne.n	80063d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c2:	4b1a      	ldr	r3, [pc, #104]	@ (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4819      	ldr	r0, [pc, #100]	@ (8006430 <prvAddCurrentTaskToDelayedList+0x98>)
 80063cc:	f7fe f9d1 	bl	8004772 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063d0:	e026      	b.n	8006420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063da:	4b14      	ldr	r3, [pc, #80]	@ (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d209      	bcs.n	80063fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ea:	4b12      	ldr	r3, [pc, #72]	@ (8006434 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b0f      	ldr	r3, [pc, #60]	@ (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f7fe f9de 	bl	80047b8 <vListInsert>
}
 80063fc:	e010      	b.n	8006420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <prvAddCurrentTaskToDelayedList+0x94>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7fe f9d4 	bl	80047b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006410:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	429a      	cmp	r2, r3
 8006418:	d202      	bcs.n	8006420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800641a:	4a08      	ldr	r2, [pc, #32]	@ (800643c <prvAddCurrentTaskToDelayedList+0xa4>)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6013      	str	r3, [r2, #0]
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20001300 	.word	0x20001300
 800642c:	20000e28 	.word	0x20000e28
 8006430:	200012e8 	.word	0x200012e8
 8006434:	200012b8 	.word	0x200012b8
 8006438:	200012b4 	.word	0x200012b4
 800643c:	2000131c 	.word	0x2000131c

08006440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	@ 0x28
 8006444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800644a:	f000 fad9 	bl	8006a00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800644e:	4b1d      	ldr	r3, [pc, #116]	@ (80064c4 <xTimerCreateTimerTask+0x84>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d021      	beq.n	800649a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800645e:	1d3a      	adds	r2, r7, #4
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	f107 030c 	add.w	r3, r7, #12
 8006468:	4618      	mov	r0, r3
 800646a:	f7fe f93d 	bl	80046e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	9202      	str	r2, [sp, #8]
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	2302      	movs	r3, #2
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	460a      	mov	r2, r1
 8006480:	4911      	ldr	r1, [pc, #68]	@ (80064c8 <xTimerCreateTimerTask+0x88>)
 8006482:	4812      	ldr	r0, [pc, #72]	@ (80064cc <xTimerCreateTimerTask+0x8c>)
 8006484:	f7fe fef0 	bl	8005268 <xTaskCreateStatic>
 8006488:	4603      	mov	r3, r0
 800648a:	4a11      	ldr	r2, [pc, #68]	@ (80064d0 <xTimerCreateTimerTask+0x90>)
 800648c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800648e:	4b10      	ldr	r3, [pc, #64]	@ (80064d0 <xTimerCreateTimerTask+0x90>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006496:	2301      	movs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064b8:	697b      	ldr	r3, [r7, #20]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20001358 	.word	0x20001358
 80064c8:	080074c0 	.word	0x080074c0
 80064cc:	080065f5 	.word	0x080065f5
 80064d0:	2000135c 	.word	0x2000135c

080064d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	@ 0x28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10b      	bne.n	8006504 <xTimerGenericCommand+0x30>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	623b      	str	r3, [r7, #32]
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	e7fd      	b.n	8006500 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006504:	4b19      	ldr	r3, [pc, #100]	@ (800656c <xTimerGenericCommand+0x98>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d02a      	beq.n	8006562 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b05      	cmp	r3, #5
 800651c:	dc18      	bgt.n	8006550 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800651e:	f7ff fead 	bl	800627c <xTaskGetSchedulerState>
 8006522:	4603      	mov	r3, r0
 8006524:	2b02      	cmp	r3, #2
 8006526:	d109      	bne.n	800653c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006528:	4b10      	ldr	r3, [pc, #64]	@ (800656c <xTimerGenericCommand+0x98>)
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	f107 0110 	add.w	r1, r7, #16
 8006530:	2300      	movs	r3, #0
 8006532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006534:	f7fe faac 	bl	8004a90 <xQueueGenericSend>
 8006538:	6278      	str	r0, [r7, #36]	@ 0x24
 800653a:	e012      	b.n	8006562 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800653c:	4b0b      	ldr	r3, [pc, #44]	@ (800656c <xTimerGenericCommand+0x98>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	f107 0110 	add.w	r1, r7, #16
 8006544:	2300      	movs	r3, #0
 8006546:	2200      	movs	r2, #0
 8006548:	f7fe faa2 	bl	8004a90 <xQueueGenericSend>
 800654c:	6278      	str	r0, [r7, #36]	@ 0x24
 800654e:	e008      	b.n	8006562 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006550:	4b06      	ldr	r3, [pc, #24]	@ (800656c <xTimerGenericCommand+0x98>)
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	f107 0110 	add.w	r1, r7, #16
 8006558:	2300      	movs	r3, #0
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	f7fe fb9a 	bl	8004c94 <xQueueGenericSendFromISR>
 8006560:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	@ 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20001358 	.word	0x20001358

08006570 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af02      	add	r7, sp, #8
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800657a:	4b1d      	ldr	r3, [pc, #116]	@ (80065f0 <prvProcessExpiredTimer+0x80>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	3304      	adds	r3, #4
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe f94d 	bl	8004828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d123      	bne.n	80065de <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	18d1      	adds	r1, r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	6978      	ldr	r0, [r7, #20]
 80065a4:	f000 f8cc 	bl	8006740 <prvInsertTimerInActiveList>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d017      	beq.n	80065de <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065ae:	2300      	movs	r3, #0
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	2100      	movs	r1, #0
 80065b8:	6978      	ldr	r0, [r7, #20]
 80065ba:	f7ff ff8b 	bl	80064d4 <xTimerGenericCommand>
 80065be:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60fb      	str	r3, [r7, #12]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e2:	6978      	ldr	r0, [r7, #20]
 80065e4:	4798      	blx	r3
}
 80065e6:	bf00      	nop
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20001350 	.word	0x20001350

080065f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	4618      	mov	r0, r3
 8006602:	f000 f859 	bl	80066b8 <prvGetNextExpireTime>
 8006606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f805 	bl	800661c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006612:	f000 f8d7 	bl	80067c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006616:	bf00      	nop
 8006618:	e7f0      	b.n	80065fc <prvTimerTask+0x8>
	...

0800661c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006626:	f7ff fa2f 	bl	8005a88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f866 	bl	8006700 <prvSampleTimeNow>
 8006634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d130      	bne.n	800669e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <prvProcessTimerOrBlockTask+0x3c>
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	429a      	cmp	r2, r3
 8006648:	d806      	bhi.n	8006658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800664a:	f7ff fa2b 	bl	8005aa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff ff8d 	bl	8006570 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006656:	e024      	b.n	80066a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800665e:	4b13      	ldr	r3, [pc, #76]	@ (80066ac <prvProcessTimerOrBlockTask+0x90>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006670:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <prvProcessTimerOrBlockTask+0x94>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	4619      	mov	r1, r3
 800667e:	f7fe fdbf 	bl	8005200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006682:	f7ff fa0f 	bl	8005aa4 <xTaskResumeAll>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <prvProcessTimerOrBlockTask+0x98>)
 800668e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	f3bf 8f6f 	isb	sy
}
 800669c:	e001      	b.n	80066a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800669e:	f7ff fa01 	bl	8005aa4 <xTaskResumeAll>
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20001354 	.word	0x20001354
 80066b0:	20001358 	.word	0x20001358
 80066b4:	e000ed04 	.word	0xe000ed04

080066b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066c0:	4b0e      	ldr	r3, [pc, #56]	@ (80066fc <prvGetNextExpireTime+0x44>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066de:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <prvGetNextExpireTime+0x44>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	e001      	b.n	80066ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20001350 	.word	0x20001350

08006700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006708:	f7ff fa6a 	bl	8005be0 <xTaskGetTickCount>
 800670c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800670e:	4b0b      	ldr	r3, [pc, #44]	@ (800673c <prvSampleTimeNow+0x3c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	429a      	cmp	r2, r3
 8006716:	d205      	bcs.n	8006724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006718:	f000 f910 	bl	800693c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e002      	b.n	800672a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800672a:	4a04      	ldr	r2, [pc, #16]	@ (800673c <prvSampleTimeNow+0x3c>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006730:	68fb      	ldr	r3, [r7, #12]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20001360 	.word	0x20001360

08006740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	d812      	bhi.n	800678c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e01b      	b.n	80067b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800677a:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <prvInsertTimerInActiveList+0x7c>)
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3304      	adds	r3, #4
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f7fe f817 	bl	80047b8 <vListInsert>
 800678a:	e012      	b.n	80067b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d206      	bcs.n	80067a2 <prvInsertTimerInActiveList+0x62>
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d302      	bcc.n	80067a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e007      	b.n	80067b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067a2:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <prvInsertTimerInActiveList+0x80>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7fe f803 	bl	80047b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067b2:	697b      	ldr	r3, [r7, #20]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20001354 	.word	0x20001354
 80067c0:	20001350 	.word	0x20001350

080067c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08e      	sub	sp, #56	@ 0x38
 80067c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067ca:	e0a5      	b.n	8006918 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da19      	bge.n	8006806 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067d2:	1d3b      	adds	r3, r7, #4
 80067d4:	3304      	adds	r3, #4
 80067d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	61fb      	str	r3, [r7, #28]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067fc:	6850      	ldr	r0, [r2, #4]
 80067fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006800:	6892      	ldr	r2, [r2, #8]
 8006802:	4611      	mov	r1, r2
 8006804:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f2c0 8085 	blt.w	8006918 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe f802 	bl	8004828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006824:	463b      	mov	r3, r7
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff ff6a 	bl	8006700 <prvSampleTimeNow>
 800682c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b09      	cmp	r3, #9
 8006832:	d86c      	bhi.n	800690e <prvProcessReceivedCommands+0x14a>
 8006834:	a201      	add	r2, pc, #4	@ (adr r2, 800683c <prvProcessReceivedCommands+0x78>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	08006865 	.word	0x08006865
 8006840:	08006865 	.word	0x08006865
 8006844:	08006865 	.word	0x08006865
 8006848:	0800690f 	.word	0x0800690f
 800684c:	080068c3 	.word	0x080068c3
 8006850:	080068fd 	.word	0x080068fd
 8006854:	08006865 	.word	0x08006865
 8006858:	08006865 	.word	0x08006865
 800685c:	0800690f 	.word	0x0800690f
 8006860:	080068c3 	.word	0x080068c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	18d1      	adds	r1, r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006870:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006872:	f7ff ff65 	bl	8006740 <prvInsertTimerInActiveList>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d04a      	beq.n	8006912 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006882:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d142      	bne.n	8006912 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	441a      	add	r2, r3
 8006894:	2300      	movs	r3, #0
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	2100      	movs	r1, #0
 800689c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800689e:	f7ff fe19 	bl	80064d4 <xTimerGenericCommand>
 80068a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d133      	bne.n	8006912 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	61bb      	str	r3, [r7, #24]
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	e7fd      	b.n	80068be <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	617b      	str	r3, [r7, #20]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	18d1      	adds	r1, r2, r3
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068f6:	f7ff ff23 	bl	8006740 <prvInsertTimerInActiveList>
					break;
 80068fa:	e00d      	b.n	8006918 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8006906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006908:	f000 fb72 	bl	8006ff0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800690c:	e003      	b.n	8006916 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <prvProcessReceivedCommands+0x154>
					break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <prvProcessReceivedCommands+0x154>
					break;
 8006916:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006918:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <prvProcessReceivedCommands+0x174>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	1d39      	adds	r1, r7, #4
 800691e:	2200      	movs	r2, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fa53 	bl	8004dcc <xQueueReceive>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	f47f af4f 	bne.w	80067cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	3730      	adds	r7, #48	@ 0x30
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20001358 	.word	0x20001358

0800693c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006942:	e046      	b.n	80069d2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006944:	4b2c      	ldr	r3, [pc, #176]	@ (80069f8 <prvSwitchTimerLists+0xbc>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800694e:	4b2a      	ldr	r3, [pc, #168]	@ (80069f8 <prvSwitchTimerLists+0xbc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3304      	adds	r3, #4
 800695c:	4618      	mov	r0, r3
 800695e:	f7fd ff63 	bl	8004828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d12f      	bne.n	80069d2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4413      	add	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	429a      	cmp	r2, r3
 8006982:	d90e      	bls.n	80069a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006990:	4b19      	ldr	r3, [pc, #100]	@ (80069f8 <prvSwitchTimerLists+0xbc>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f7fd ff0c 	bl	80047b8 <vListInsert>
 80069a0:	e017      	b.n	80069d2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069a2:	2300      	movs	r3, #0
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2300      	movs	r3, #0
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	2100      	movs	r1, #0
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fd91 	bl	80064d4 <xTimerGenericCommand>
 80069b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <prvSwitchTimerLists+0x96>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	603b      	str	r3, [r7, #0]
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	e7fd      	b.n	80069ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069d2:	4b09      	ldr	r3, [pc, #36]	@ (80069f8 <prvSwitchTimerLists+0xbc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1b3      	bne.n	8006944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069dc:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <prvSwitchTimerLists+0xbc>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069e2:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <prvSwitchTimerLists+0xc0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a04      	ldr	r2, [pc, #16]	@ (80069f8 <prvSwitchTimerLists+0xbc>)
 80069e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069ea:	4a04      	ldr	r2, [pc, #16]	@ (80069fc <prvSwitchTimerLists+0xc0>)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	6013      	str	r3, [r2, #0]
}
 80069f0:	bf00      	nop
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20001350 	.word	0x20001350
 80069fc:	20001354 	.word	0x20001354

08006a00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a06:	f000 f929 	bl	8006c5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a0a:	4b15      	ldr	r3, [pc, #84]	@ (8006a60 <prvCheckForValidListAndQueue+0x60>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d120      	bne.n	8006a54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a12:	4814      	ldr	r0, [pc, #80]	@ (8006a64 <prvCheckForValidListAndQueue+0x64>)
 8006a14:	f7fd fe82 	bl	800471c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a18:	4813      	ldr	r0, [pc, #76]	@ (8006a68 <prvCheckForValidListAndQueue+0x68>)
 8006a1a:	f7fd fe7f 	bl	800471c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a1e:	4b13      	ldr	r3, [pc, #76]	@ (8006a6c <prvCheckForValidListAndQueue+0x6c>)
 8006a20:	4a10      	ldr	r2, [pc, #64]	@ (8006a64 <prvCheckForValidListAndQueue+0x64>)
 8006a22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a24:	4b12      	ldr	r3, [pc, #72]	@ (8006a70 <prvCheckForValidListAndQueue+0x70>)
 8006a26:	4a10      	ldr	r2, [pc, #64]	@ (8006a68 <prvCheckForValidListAndQueue+0x68>)
 8006a28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4b11      	ldr	r3, [pc, #68]	@ (8006a74 <prvCheckForValidListAndQueue+0x74>)
 8006a30:	4a11      	ldr	r2, [pc, #68]	@ (8006a78 <prvCheckForValidListAndQueue+0x78>)
 8006a32:	2110      	movs	r1, #16
 8006a34:	200a      	movs	r0, #10
 8006a36:	f7fd ff8b 	bl	8004950 <xQueueGenericCreateStatic>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4a08      	ldr	r2, [pc, #32]	@ (8006a60 <prvCheckForValidListAndQueue+0x60>)
 8006a3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a40:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <prvCheckForValidListAndQueue+0x60>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a48:	4b05      	ldr	r3, [pc, #20]	@ (8006a60 <prvCheckForValidListAndQueue+0x60>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	490b      	ldr	r1, [pc, #44]	@ (8006a7c <prvCheckForValidListAndQueue+0x7c>)
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fbae 	bl	80051b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a54:	f000 f932 	bl	8006cbc <vPortExitCritical>
}
 8006a58:	bf00      	nop
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20001358 	.word	0x20001358
 8006a64:	20001328 	.word	0x20001328
 8006a68:	2000133c 	.word	0x2000133c
 8006a6c:	20001350 	.word	0x20001350
 8006a70:	20001354 	.word	0x20001354
 8006a74:	20001404 	.word	0x20001404
 8006a78:	20001364 	.word	0x20001364
 8006a7c:	080074c8 	.word	0x080074c8

08006a80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3b04      	subs	r3, #4
 8006a90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3b04      	subs	r3, #4
 8006aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ab0:	4a08      	ldr	r2, [pc, #32]	@ (8006ad4 <pxPortInitialiseStack+0x54>)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3b14      	subs	r3, #20
 8006aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b20      	subs	r3, #32
 8006ac6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	08006ad9 	.word	0x08006ad9

08006ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ae2:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <prvTaskExitError+0x54>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d00b      	beq.n	8006b04 <prvTaskExitError+0x2c>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60fb      	str	r3, [r7, #12]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <prvTaskExitError+0x28>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	60bb      	str	r3, [r7, #8]
}
 8006b16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b18:	bf00      	nop
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0fc      	beq.n	8006b1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr
 8006b2c:	20000020 	.word	0x20000020

08006b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b30:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <pxCurrentTCBConst2>)
 8006b32:	6819      	ldr	r1, [r3, #0]
 8006b34:	6808      	ldr	r0, [r1, #0]
 8006b36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b3a:	f380 8809 	msr	PSP, r0
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f04f 0000 	mov.w	r0, #0
 8006b46:	f380 8811 	msr	BASEPRI, r0
 8006b4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b4e:	4770      	bx	lr

08006b50 <pxCurrentTCBConst2>:
 8006b50:	20000e28 	.word	0x20000e28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop

08006b58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006b58:	4806      	ldr	r0, [pc, #24]	@ (8006b74 <prvPortStartFirstTask+0x1c>)
 8006b5a:	6800      	ldr	r0, [r0, #0]
 8006b5c:	6800      	ldr	r0, [r0, #0]
 8006b5e:	f380 8808 	msr	MSP, r0
 8006b62:	b662      	cpsie	i
 8006b64:	b661      	cpsie	f
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	df00      	svc	0
 8006b70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b72:	bf00      	nop
 8006b74:	e000ed08 	.word	0xe000ed08

08006b78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b7e:	4b32      	ldr	r3, [pc, #200]	@ (8006c48 <xPortStartScheduler+0xd0>)
 8006b80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	22ff      	movs	r2, #255	@ 0xff
 8006b8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c4c <xPortStartScheduler+0xd4>)
 8006ba4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006ba8:	2207      	movs	r2, #7
 8006baa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bac:	e009      	b.n	8006bc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006bae:	4b28      	ldr	r3, [pc, #160]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	4a26      	ldr	r2, [pc, #152]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006bb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bca:	2b80      	cmp	r3, #128	@ 0x80
 8006bcc:	d0ef      	beq.n	8006bae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bce:	4b20      	ldr	r3, [pc, #128]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1c3 0307 	rsb	r3, r3, #7
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d00b      	beq.n	8006bf2 <xPortStartScheduler+0x7a>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	60bb      	str	r3, [r7, #8]
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	e7fd      	b.n	8006bee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bf2:	4b17      	ldr	r3, [pc, #92]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	4a15      	ldr	r2, [pc, #84]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006bfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bfc:	4b14      	ldr	r3, [pc, #80]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c04:	4a12      	ldr	r2, [pc, #72]	@ (8006c50 <xPortStartScheduler+0xd8>)
 8006c06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c10:	4b10      	ldr	r3, [pc, #64]	@ (8006c54 <xPortStartScheduler+0xdc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0f      	ldr	r2, [pc, #60]	@ (8006c54 <xPortStartScheduler+0xdc>)
 8006c16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <xPortStartScheduler+0xdc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a0c      	ldr	r2, [pc, #48]	@ (8006c54 <xPortStartScheduler+0xdc>)
 8006c22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c28:	f000 f8b8 	bl	8006d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c58 <xPortStartScheduler+0xe0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c32:	f7ff ff91 	bl	8006b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c36:	f7ff f8a1 	bl	8005d7c <vTaskSwitchContext>
	prvTaskExitError();
 8006c3a:	f7ff ff4d 	bl	8006ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	e000e400 	.word	0xe000e400
 8006c4c:	20001454 	.word	0x20001454
 8006c50:	20001458 	.word	0x20001458
 8006c54:	e000ed20 	.word	0xe000ed20
 8006c58:	20000020 	.word	0x20000020

08006c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	607b      	str	r3, [r7, #4]
}
 8006c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c76:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <vPortEnterCritical+0x58>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb4 <vPortEnterCritical+0x58>)
 8006c7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c80:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb4 <vPortEnterCritical+0x58>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d110      	bne.n	8006caa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c88:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb8 <vPortEnterCritical+0x5c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <vPortEnterCritical+0x4e>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	603b      	str	r3, [r7, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <vPortEnterCritical+0x4a>
	}
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	20000020 	.word	0x20000020
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cc2:	4b12      	ldr	r3, [pc, #72]	@ (8006d0c <vPortExitCritical+0x50>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10b      	bne.n	8006ce2 <vPortExitCritical+0x26>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	607b      	str	r3, [r7, #4]
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	e7fd      	b.n	8006cde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8006d0c <vPortExitCritical+0x50>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	4a08      	ldr	r2, [pc, #32]	@ (8006d0c <vPortExitCritical+0x50>)
 8006cea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cec:	4b07      	ldr	r3, [pc, #28]	@ (8006d0c <vPortExitCritical+0x50>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <vPortExitCritical+0x44>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f383 8811 	msr	BASEPRI, r3
}
 8006cfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000020 	.word	0x20000020

08006d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d10:	f3ef 8009 	mrs	r0, PSP
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <pxCurrentTCBConst>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d20:	6010      	str	r0, [r2, #0]
 8006d22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006d26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d2a:	f380 8811 	msr	BASEPRI, r0
 8006d2e:	f7ff f825 	bl	8005d7c <vTaskSwitchContext>
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	6808      	ldr	r0, [r1, #0]
 8006d42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d46:	f380 8809 	msr	PSP, r0
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	4770      	bx	lr

08006d50 <pxCurrentTCBConst>:
 8006d50:	20000e28 	.word	0x20000e28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop

08006d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
}
 8006d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d72:	f7fe ff43 	bl	8005bfc <xTaskIncrementTick>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d7c:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <SysTick_Handler+0x40>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f383 8811 	msr	BASEPRI, r3
}
 8006d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006da0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <vPortSetupTimerInterrupt+0x30>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006da6:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd0 <vPortSetupTimerInterrupt+0x34>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dac:	4b09      	ldr	r3, [pc, #36]	@ (8006dd4 <vPortSetupTimerInterrupt+0x38>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a09      	ldr	r2, [pc, #36]	@ (8006dd8 <vPortSetupTimerInterrupt+0x3c>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	4a08      	ldr	r2, [pc, #32]	@ (8006ddc <vPortSetupTimerInterrupt+0x40>)
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dbe:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <vPortSetupTimerInterrupt+0x30>)
 8006dc0:	2207      	movs	r2, #7
 8006dc2:	601a      	str	r2, [r3, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr
 8006dcc:	e000e010 	.word	0xe000e010
 8006dd0:	e000e018 	.word	0xe000e018
 8006dd4:	20000014 	.word	0x20000014
 8006dd8:	10624dd3 	.word	0x10624dd3
 8006ddc:	e000e014 	.word	0xe000e014

08006de0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006de6:	f3ef 8305 	mrs	r3, IPSR
 8006dea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d915      	bls.n	8006e1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006df2:	4a17      	ldr	r2, [pc, #92]	@ (8006e50 <vPortValidateInterruptPriority+0x70>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dfc:	4b15      	ldr	r3, [pc, #84]	@ (8006e54 <vPortValidateInterruptPriority+0x74>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	7afa      	ldrb	r2, [r7, #11]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d20b      	bcs.n	8006e1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	607b      	str	r3, [r7, #4]
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	e7fd      	b.n	8006e1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <vPortValidateInterruptPriority+0x78>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <vPortValidateInterruptPriority+0x7c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d90b      	bls.n	8006e46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	603b      	str	r3, [r7, #0]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <vPortValidateInterruptPriority+0x62>
	}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr
 8006e50:	e000e3f0 	.word	0xe000e3f0
 8006e54:	20001454 	.word	0x20001454
 8006e58:	e000ed0c 	.word	0xe000ed0c
 8006e5c:	20001458 	.word	0x20001458

08006e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	@ 0x28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e6c:	f7fe fe0c 	bl	8005a88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e70:	4b5a      	ldr	r3, [pc, #360]	@ (8006fdc <pvPortMalloc+0x17c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e78:	f000 f916 	bl	80070a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e7c:	4b58      	ldr	r3, [pc, #352]	@ (8006fe0 <pvPortMalloc+0x180>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4013      	ands	r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 8090 	bne.w	8006faa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01e      	beq.n	8006ece <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e90:	2208      	movs	r2, #8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d015      	beq.n	8006ece <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f023 0307 	bic.w	r3, r3, #7
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00b      	beq.n	8006ece <pvPortMalloc+0x6e>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	617b      	str	r3, [r7, #20]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d06a      	beq.n	8006faa <pvPortMalloc+0x14a>
 8006ed4:	4b43      	ldr	r3, [pc, #268]	@ (8006fe4 <pvPortMalloc+0x184>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d865      	bhi.n	8006faa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ede:	4b42      	ldr	r3, [pc, #264]	@ (8006fe8 <pvPortMalloc+0x188>)
 8006ee0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ee2:	4b41      	ldr	r3, [pc, #260]	@ (8006fe8 <pvPortMalloc+0x188>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ee8:	e004      	b.n	8006ef4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d903      	bls.n	8006f06 <pvPortMalloc+0xa6>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f1      	bne.n	8006eea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f06:	4b35      	ldr	r3, [pc, #212]	@ (8006fdc <pvPortMalloc+0x17c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d04c      	beq.n	8006faa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2208      	movs	r2, #8
 8006f16:	4413      	add	r3, r2
 8006f18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	1ad2      	subs	r2, r2, r3
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d920      	bls.n	8006f74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <pvPortMalloc+0xfc>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	613b      	str	r3, [r7, #16]
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f6e:	69b8      	ldr	r0, [r7, #24]
 8006f70:	f000 f8fc 	bl	800716c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f74:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe4 <pvPortMalloc+0x184>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	4a19      	ldr	r2, [pc, #100]	@ (8006fe4 <pvPortMalloc+0x184>)
 8006f80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f82:	4b18      	ldr	r3, [pc, #96]	@ (8006fe4 <pvPortMalloc+0x184>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b19      	ldr	r3, [pc, #100]	@ (8006fec <pvPortMalloc+0x18c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d203      	bcs.n	8006f96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f8e:	4b15      	ldr	r3, [pc, #84]	@ (8006fe4 <pvPortMalloc+0x184>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <pvPortMalloc+0x18c>)
 8006f94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	4b11      	ldr	r3, [pc, #68]	@ (8006fe0 <pvPortMalloc+0x180>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006faa:	f7fe fd7b 	bl	8005aa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0307 	and.w	r3, r3, #7
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <pvPortMalloc+0x170>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60fb      	str	r3, [r7, #12]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <pvPortMalloc+0x16c>
	return pvReturn;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3728      	adds	r7, #40	@ 0x28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20002064 	.word	0x20002064
 8006fe0:	20002070 	.word	0x20002070
 8006fe4:	20002068 	.word	0x20002068
 8006fe8:	2000205c 	.word	0x2000205c
 8006fec:	2000206c 	.word	0x2000206c

08006ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d04a      	beq.n	8007098 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007002:	2308      	movs	r3, #8
 8007004:	425b      	negs	r3, r3
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	4b22      	ldr	r3, [pc, #136]	@ (80070a0 <vPortFree+0xb0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4013      	ands	r3, r2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <vPortFree+0x46>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60fb      	str	r3, [r7, #12]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00b      	beq.n	8007056 <vPortFree+0x66>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60bb      	str	r3, [r7, #8]
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	e7fd      	b.n	8007052 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	4b11      	ldr	r3, [pc, #68]	@ (80070a0 <vPortFree+0xb0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d019      	beq.n	8007098 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d115      	bne.n	8007098 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <vPortFree+0xb0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	43db      	mvns	r3, r3
 8007076:	401a      	ands	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800707c:	f7fe fd04 	bl	8005a88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	4b07      	ldr	r3, [pc, #28]	@ (80070a4 <vPortFree+0xb4>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4413      	add	r3, r2
 800708a:	4a06      	ldr	r2, [pc, #24]	@ (80070a4 <vPortFree+0xb4>)
 800708c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800708e:	6938      	ldr	r0, [r7, #16]
 8007090:	f000 f86c 	bl	800716c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007094:	f7fe fd06 	bl	8005aa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007098:	bf00      	nop
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20002070 	.word	0x20002070
 80070a4:	20002068 	.word	0x20002068

080070a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80070b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070b4:	4b27      	ldr	r3, [pc, #156]	@ (8007154 <prvHeapInit+0xac>)
 80070b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00c      	beq.n	80070dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3307      	adds	r3, #7
 80070c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007154 <prvHeapInit+0xac>)
 80070d8:	4413      	add	r3, r2
 80070da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007158 <prvHeapInit+0xb0>)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007158 <prvHeapInit+0xb0>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	4413      	add	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070f4:	2208      	movs	r2, #8
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0307 	bic.w	r3, r3, #7
 8007102:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a15      	ldr	r2, [pc, #84]	@ (800715c <prvHeapInit+0xb4>)
 8007108:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800710a:	4b14      	ldr	r3, [pc, #80]	@ (800715c <prvHeapInit+0xb4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007112:	4b12      	ldr	r3, [pc, #72]	@ (800715c <prvHeapInit+0xb4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007128:	4b0c      	ldr	r3, [pc, #48]	@ (800715c <prvHeapInit+0xb4>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4a0a      	ldr	r2, [pc, #40]	@ (8007160 <prvHeapInit+0xb8>)
 8007136:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4a09      	ldr	r2, [pc, #36]	@ (8007164 <prvHeapInit+0xbc>)
 800713e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007140:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <prvHeapInit+0xc0>)
 8007142:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007146:	601a      	str	r2, [r3, #0]
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000145c 	.word	0x2000145c
 8007158:	2000205c 	.word	0x2000205c
 800715c:	20002064 	.word	0x20002064
 8007160:	2000206c 	.word	0x2000206c
 8007164:	20002068 	.word	0x20002068
 8007168:	20002070 	.word	0x20002070

0800716c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007174:	4b27      	ldr	r3, [pc, #156]	@ (8007214 <prvInsertBlockIntoFreeList+0xa8>)
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e002      	b.n	8007180 <prvInsertBlockIntoFreeList+0x14>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	d8f7      	bhi.n	800717a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	4413      	add	r3, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	429a      	cmp	r2, r3
 800719a:	d108      	bne.n	80071ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	441a      	add	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d118      	bne.n	80071f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b14      	ldr	r3, [pc, #80]	@ (8007218 <prvInsertBlockIntoFreeList+0xac>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d00d      	beq.n	80071ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e008      	b.n	80071fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007218 <prvInsertBlockIntoFreeList+0xac>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	e003      	b.n	80071fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d002      	beq.n	800720a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr
 8007214:	2000205c 	.word	0x2000205c
 8007218:	20002064 	.word	0x20002064

0800721c <memset>:
 800721c:	4603      	mov	r3, r0
 800721e:	4402      	add	r2, r0
 8007220:	4293      	cmp	r3, r2
 8007222:	d100      	bne.n	8007226 <memset+0xa>
 8007224:	4770      	bx	lr
 8007226:	f803 1b01 	strb.w	r1, [r3], #1
 800722a:	e7f9      	b.n	8007220 <memset+0x4>

0800722c <_reclaim_reent>:
 800722c:	4b29      	ldr	r3, [pc, #164]	@ (80072d4 <_reclaim_reent+0xa8>)
 800722e:	b570      	push	{r4, r5, r6, lr}
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4604      	mov	r4, r0
 8007234:	4283      	cmp	r3, r0
 8007236:	d04b      	beq.n	80072d0 <_reclaim_reent+0xa4>
 8007238:	69c3      	ldr	r3, [r0, #28]
 800723a:	b1ab      	cbz	r3, 8007268 <_reclaim_reent+0x3c>
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	b16b      	cbz	r3, 800725c <_reclaim_reent+0x30>
 8007240:	2500      	movs	r5, #0
 8007242:	69e3      	ldr	r3, [r4, #28]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	5959      	ldr	r1, [r3, r5]
 8007248:	2900      	cmp	r1, #0
 800724a:	d13b      	bne.n	80072c4 <_reclaim_reent+0x98>
 800724c:	3504      	adds	r5, #4
 800724e:	2d80      	cmp	r5, #128	@ 0x80
 8007250:	d1f7      	bne.n	8007242 <_reclaim_reent+0x16>
 8007252:	69e3      	ldr	r3, [r4, #28]
 8007254:	4620      	mov	r0, r4
 8007256:	68d9      	ldr	r1, [r3, #12]
 8007258:	f000 f872 	bl	8007340 <_free_r>
 800725c:	69e3      	ldr	r3, [r4, #28]
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	b111      	cbz	r1, 8007268 <_reclaim_reent+0x3c>
 8007262:	4620      	mov	r0, r4
 8007264:	f000 f86c 	bl	8007340 <_free_r>
 8007268:	6961      	ldr	r1, [r4, #20]
 800726a:	b111      	cbz	r1, 8007272 <_reclaim_reent+0x46>
 800726c:	4620      	mov	r0, r4
 800726e:	f000 f867 	bl	8007340 <_free_r>
 8007272:	69e1      	ldr	r1, [r4, #28]
 8007274:	b111      	cbz	r1, 800727c <_reclaim_reent+0x50>
 8007276:	4620      	mov	r0, r4
 8007278:	f000 f862 	bl	8007340 <_free_r>
 800727c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800727e:	b111      	cbz	r1, 8007286 <_reclaim_reent+0x5a>
 8007280:	4620      	mov	r0, r4
 8007282:	f000 f85d 	bl	8007340 <_free_r>
 8007286:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007288:	b111      	cbz	r1, 8007290 <_reclaim_reent+0x64>
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f858 	bl	8007340 <_free_r>
 8007290:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007292:	b111      	cbz	r1, 800729a <_reclaim_reent+0x6e>
 8007294:	4620      	mov	r0, r4
 8007296:	f000 f853 	bl	8007340 <_free_r>
 800729a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800729c:	b111      	cbz	r1, 80072a4 <_reclaim_reent+0x78>
 800729e:	4620      	mov	r0, r4
 80072a0:	f000 f84e 	bl	8007340 <_free_r>
 80072a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072a6:	b111      	cbz	r1, 80072ae <_reclaim_reent+0x82>
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 f849 	bl	8007340 <_free_r>
 80072ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80072b0:	b111      	cbz	r1, 80072b8 <_reclaim_reent+0x8c>
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 f844 	bl	8007340 <_free_r>
 80072b8:	6a23      	ldr	r3, [r4, #32]
 80072ba:	b14b      	cbz	r3, 80072d0 <_reclaim_reent+0xa4>
 80072bc:	4620      	mov	r0, r4
 80072be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072c2:	4718      	bx	r3
 80072c4:	680e      	ldr	r6, [r1, #0]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f83a 	bl	8007340 <_free_r>
 80072cc:	4631      	mov	r1, r6
 80072ce:	e7bb      	b.n	8007248 <_reclaim_reent+0x1c>
 80072d0:	bd70      	pop	{r4, r5, r6, pc}
 80072d2:	bf00      	nop
 80072d4:	20000024 	.word	0x20000024

080072d8 <__libc_init_array>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	2600      	movs	r6, #0
 80072dc:	4d0c      	ldr	r5, [pc, #48]	@ (8007310 <__libc_init_array+0x38>)
 80072de:	4c0d      	ldr	r4, [pc, #52]	@ (8007314 <__libc_init_array+0x3c>)
 80072e0:	1b64      	subs	r4, r4, r5
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	42a6      	cmp	r6, r4
 80072e6:	d109      	bne.n	80072fc <__libc_init_array+0x24>
 80072e8:	f000 f87e 	bl	80073e8 <_init>
 80072ec:	2600      	movs	r6, #0
 80072ee:	4d0a      	ldr	r5, [pc, #40]	@ (8007318 <__libc_init_array+0x40>)
 80072f0:	4c0a      	ldr	r4, [pc, #40]	@ (800731c <__libc_init_array+0x44>)
 80072f2:	1b64      	subs	r4, r4, r5
 80072f4:	10a4      	asrs	r4, r4, #2
 80072f6:	42a6      	cmp	r6, r4
 80072f8:	d105      	bne.n	8007306 <__libc_init_array+0x2e>
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007300:	4798      	blx	r3
 8007302:	3601      	adds	r6, #1
 8007304:	e7ee      	b.n	80072e4 <__libc_init_array+0xc>
 8007306:	f855 3b04 	ldr.w	r3, [r5], #4
 800730a:	4798      	blx	r3
 800730c:	3601      	adds	r6, #1
 800730e:	e7f2      	b.n	80072f6 <__libc_init_array+0x1e>
 8007310:	08007c68 	.word	0x08007c68
 8007314:	08007c68 	.word	0x08007c68
 8007318:	08007c68 	.word	0x08007c68
 800731c:	08007c6c 	.word	0x08007c6c

08007320 <__retarget_lock_acquire_recursive>:
 8007320:	4770      	bx	lr

08007322 <__retarget_lock_release_recursive>:
 8007322:	4770      	bx	lr

08007324 <memcpy>:
 8007324:	440a      	add	r2, r1
 8007326:	4291      	cmp	r1, r2
 8007328:	f100 33ff 	add.w	r3, r0, #4294967295
 800732c:	d100      	bne.n	8007330 <memcpy+0xc>
 800732e:	4770      	bx	lr
 8007330:	b510      	push	{r4, lr}
 8007332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007336:	4291      	cmp	r1, r2
 8007338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800733c:	d1f9      	bne.n	8007332 <memcpy+0xe>
 800733e:	bd10      	pop	{r4, pc}

08007340 <_free_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4605      	mov	r5, r0
 8007344:	2900      	cmp	r1, #0
 8007346:	d040      	beq.n	80073ca <_free_r+0x8a>
 8007348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734c:	1f0c      	subs	r4, r1, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	18e4      	addlt	r4, r4, r3
 8007354:	f000 f83c 	bl	80073d0 <__malloc_lock>
 8007358:	4a1c      	ldr	r2, [pc, #112]	@ (80073cc <_free_r+0x8c>)
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	b933      	cbnz	r3, 800736c <_free_r+0x2c>
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	6014      	str	r4, [r2, #0]
 8007362:	4628      	mov	r0, r5
 8007364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007368:	f000 b838 	b.w	80073dc <__malloc_unlock>
 800736c:	42a3      	cmp	r3, r4
 800736e:	d908      	bls.n	8007382 <_free_r+0x42>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	1821      	adds	r1, r4, r0
 8007374:	428b      	cmp	r3, r1
 8007376:	bf01      	itttt	eq
 8007378:	6819      	ldreq	r1, [r3, #0]
 800737a:	685b      	ldreq	r3, [r3, #4]
 800737c:	1809      	addeq	r1, r1, r0
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	e7ed      	b.n	800735e <_free_r+0x1e>
 8007382:	461a      	mov	r2, r3
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b10b      	cbz	r3, 800738c <_free_r+0x4c>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d9fa      	bls.n	8007382 <_free_r+0x42>
 800738c:	6811      	ldr	r1, [r2, #0]
 800738e:	1850      	adds	r0, r2, r1
 8007390:	42a0      	cmp	r0, r4
 8007392:	d10b      	bne.n	80073ac <_free_r+0x6c>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	4401      	add	r1, r0
 8007398:	1850      	adds	r0, r2, r1
 800739a:	4283      	cmp	r3, r0
 800739c:	6011      	str	r1, [r2, #0]
 800739e:	d1e0      	bne.n	8007362 <_free_r+0x22>
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4408      	add	r0, r1
 80073a6:	6010      	str	r0, [r2, #0]
 80073a8:	6053      	str	r3, [r2, #4]
 80073aa:	e7da      	b.n	8007362 <_free_r+0x22>
 80073ac:	d902      	bls.n	80073b4 <_free_r+0x74>
 80073ae:	230c      	movs	r3, #12
 80073b0:	602b      	str	r3, [r5, #0]
 80073b2:	e7d6      	b.n	8007362 <_free_r+0x22>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	1821      	adds	r1, r4, r0
 80073b8:	428b      	cmp	r3, r1
 80073ba:	bf01      	itttt	eq
 80073bc:	6819      	ldreq	r1, [r3, #0]
 80073be:	685b      	ldreq	r3, [r3, #4]
 80073c0:	1809      	addeq	r1, r1, r0
 80073c2:	6021      	streq	r1, [r4, #0]
 80073c4:	6063      	str	r3, [r4, #4]
 80073c6:	6054      	str	r4, [r2, #4]
 80073c8:	e7cb      	b.n	8007362 <_free_r+0x22>
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	200021b0 	.word	0x200021b0

080073d0 <__malloc_lock>:
 80073d0:	4801      	ldr	r0, [pc, #4]	@ (80073d8 <__malloc_lock+0x8>)
 80073d2:	f7ff bfa5 	b.w	8007320 <__retarget_lock_acquire_recursive>
 80073d6:	bf00      	nop
 80073d8:	200021ac 	.word	0x200021ac

080073dc <__malloc_unlock>:
 80073dc:	4801      	ldr	r0, [pc, #4]	@ (80073e4 <__malloc_unlock+0x8>)
 80073de:	f7ff bfa0 	b.w	8007322 <__retarget_lock_release_recursive>
 80073e2:	bf00      	nop
 80073e4:	200021ac 	.word	0x200021ac

080073e8 <_init>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr

080073f4 <_fini>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr
